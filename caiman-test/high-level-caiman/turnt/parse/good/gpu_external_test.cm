#version 0.1.0
extern(gpu) simple(x: i32) -> out: i32 {
    path : "gpu_external.comp",
    entry : "main",
    dimensions : 3,
    resource {
        group : 0,
        binding : 0,
        input : x
    },
    resource {
        group : 0,
        binding : 1,
        output : out
    }
}

val foo(x: i32) -> i32 {
    c : i32 :- 1
    returns simple(x)
}

tmln foo_time(e: Event) -> Event {
    enc1, enc2 :- encoding_event(e, [])
    sub :- submission_event(enc2)
    snc :- synchronization_event(enc1, sub)
    returns snc
}

fn foo_main(x: i32) -> i32 
    impls foo, foo_time, foo_space
{
    let c : i32'<storage> = 1 @ [node(foo.c)-?];
    let e = new_gpu_encoder();
    e.encode_cpy[x_gpu <- x];
    e.encode[y_gpu <- simple'<c, c, c>(x_gpu)];
    let f = e.submit();


    let y = await(f);
    let result = y.y_gpu;
    result

}

pipeline main {
    foo_main
}