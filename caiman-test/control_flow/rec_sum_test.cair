version 0.0.2

ffi i64;
event %event0;
buffer_space %buffspace;
native_value %i64 : i64;

// A simple recursive sum test

function @main() -> i64;
function @rec_sum(i64) -> i64;

function @add(i64, i64) -> i64;
// function @lte(i64, i64) -> i64;
function @gt(i64, i64) -> i64;

function @loop() -> [];

external-cpu-pure[impl @add] %add(i64, i64) -> i64;
// external-cpu-pure[impl @lte] %lte(i64, i64) -> i64;
external-cpu-pure[impl @gt] %gt(i64, i64) -> i64;
external-cpu[impl @loop] %loop() -> [];
effect<%loop> %eff;


// main

value[impl default @main] %main() -> [%out: i64] {
    %x = constant %i64 20;
    %y_t = call @rec_sum(%x);
    %y = extract %y_t 0;
    return %y;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%main_head<$time-usable, $time-usable>() ->
    [%out : $val.%out-usable $space-usable $time-usable %i64]
{
    %x_ref = alloc-temporary local [] i64;
    local-do-builtin $val.%x() -> %x_ref;
    %arg = read-ref i64 %x_ref;

    %default = default-join;
    %join = inline-join %main_ret [] %default;

    schedule-call %rec_sum_head[$val.%y_t, $time, $space](%arg) %join;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%main_ret<$time-usable, $time-usable>
    (%y : $val.%y-usable $space-usable $time-usable %i64) ->
    [%out : $val.%y-usable $space-usable $time-usable %i64] 
{

    return %y;
}

// rec_sum


value[impl default @rec_sum] %rec_sum(%i : %i64) -> [%out: i64] {
    %zero = constant %i64 0;
    %neg_1 = constant %i64 -1;

    %b_t = call @gt(%i, %zero);
    %b = extract %b_t 0;

    %i_minus_1_t = call @add(%i, %neg_1);
    %i_minus_1 = extract %i_minus_1_t 0;

    %r_t = call @rec_sum(%i_minus_1);
    %r = extract %r_t 0;

    %sum_t = call @add(%i, %r);
    %sum = extract %sum_t 0;

    // i <= 0 ? zero : sum
    // select cond true false
    %result = select %b %sum %zero;
    return %result;
}

schedule[value $val = %rec_sum, timeline $time = %time, spatial $space = %space]
%rec_sum_head<$time-usable, $time-usable>
    (%arg : $val.%i-usable $space-usable $time-usable %i64) ->
    [%out : $val.%out-usable $space-usable $time-usable %i64] 
{
    %zero_ref = alloc-temporary local [] i64;
    local-do-builtin $val.%zero() -> %zero_ref;
    %zero = read-ref i64 %zero_ref;

    %neg_1_ref = alloc-temporary local [] i64;
    local-do-builtin $val.%neg_1() -> %neg_1_ref;
    %neg_1 = read-ref i64 %neg_1_ref;

    %cond_ref = alloc-temporary local [] i64;
    local-do-external %gt $val.%b_t(%arg, %zero) -> %cond_ref;
    %cond = read-ref i64 %cond_ref;

    %arg_minus_1_ref = alloc-temporary local [] i64;
    local-do-external %add $val.%i_minus_1_t(%arg, %neg_1) -> %arg_minus_1_ref;
    %arg_minus_1 = read-ref i64 %arg_minus_1_ref;

    %default = default-join;
    %join = serialized-join %rec_sum_ret [] %default;

    // i <= 0 ? %rec_sum_base : %rec_sum_rec
    // select cond [true, false]
    schedule-select %cond [%rec_sum_rec_yield, %rec_sum_base] 
        [$val.%result, $time, $space]
        (%arg_minus_1, %arg) %join;

}

schedule[value $val = %rec_sum, timeline $time = %time, spatial $space = %space]
%rec_sum_base<$time-usable, $time-usable>
    (%arg_minus_1 : $val.%i_minus_1-usable $space-usable $time-usable %i64,
     %arg : phi-$val.%i-usable $space-usable $time-usable %i64) ->
    [%out : $val.%zero-usable $space-usable $time-usable %i64] 
{
    %zero_ref = alloc-temporary local [] i64;
    local-do-builtin $val.%zero() -> %zero_ref;
    %zero = read-ref i64 %zero_ref;

    return %zero;

}

schedule[value $val = %rec_sum, timeline $time = %time, spatial $space = %space]
%rec_sum_rec_yield<$time-usable, $time-usable>
    (%arg_minus_1 : $val.%i_minus_1-usable $space-usable $time-usable %i64,
    %arg : phi-$val.%i-usable $space-usable $time-usable %i64) ->
    [%out : $val.%sum-usable $space-usable $time-usable %i64] 
{
    %default = default-join;
    %join = serialized-join %rec_sum_rec_head [%arg_minus_1, %arg] %default;

    schedule-call-yield %loop[$val, $time, $space]() %join;
}

schedule[value $val = %rec_sum, timeline $time = %time, spatial $space = %space]
%rec_sum_rec_head<$time-usable, $time-usable>
    (%arg_minus_1 : $val.%i_minus_1-usable $space-usable $time-usable %i64,
     %i : phi-$val.%i-usable $space-usable $time-usable %i64) ->
    [%out : $val.%sum-usable $space-usable $time-usable %i64] 
{

    %default = default-join;
    %join = serialized-join %rec_sum_rec_tail [%i] %default;

    schedule-call %rec_sum_head[$val.%r_t, $time, $space](%arg_minus_1) %join;
}

// schedule[value $val = %rec_sum, timeline $time = %time, spatial $space = %space]
// %rec_sum_rec_mid<

schedule[value $val = %rec_sum, timeline $time = %time, spatial $space = %space]
%rec_sum_rec_tail<$time-usable, $time-usable>
    (%i : phi-$val.%i-usable $space-usable $time-usable %i64,
     %r : $val.%r-usable $space-usable $time-usable %i64) ->
    [%out : $val.%sum-usable $space-usable $time-usable %i64] 
{

    %res_ref = alloc-temporary local [] i64;
    local-do-external %add $val.%sum_t(%i, %r) -> %res_ref;
    %res = read-ref i64 %res_ref;
    return %res;
}

schedule[value $val = %rec_sum, timeline $time = %time, spatial $space = %space]
%rec_sum_ret<$time-usable, $time-usable>
    (%arg : $val.%result-usable $space-usable $time-usable %i64) ->
    [%out : $val.%out-usable $space-usable $time-usable %i64] 
{
    return %arg;
}



pipeline "main" = %main_head, effect %eff;