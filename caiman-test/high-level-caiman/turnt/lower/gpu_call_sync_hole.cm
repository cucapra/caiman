#version 0.1.0

extern(gpu) simple(x : i32) -> out: i32
{
    path : "gpu_external.comp",
    entry : "main",
    dimensions : 3,
    in {
        group : 0,
        binding : 0,
        input : x
    },
    out {
        group : 0,
        binding : 1,
        output : out
    }
}

type R = { u: i32'<storage, map_read> };

val foo(x : i32) -> out: i32 {
    y :- simple'<1, 1, 1>(x)
    y2 :- bar(y)
    returns y2
}

val bar(x: i32) -> out: i32 {
    y :- simple'<1, 1, 1>(3)
    returns x + y
}

tmln bar_time(e: Event, f: Fence) -> out: Event {
    loc, rem :- encode_event(e, f)
    sub :- submit_event(rem)
    snc1 :- sync_event(loc, sub)
    snc2 :- sync_event(snc1, f)
    returns snc2
}

tmln foo_time(e: Event) -> out: Event {
    loc, rem :- encode_event(e)
    sub :- submit_event(rem)
    ret :- bar_time(loc, sub)
    returns ret
}

sptl space(bs: BufferSpace) -> BufferSpace {
    returns bs
}


fn foo_impl(x: &i32) -> i32 impls foo_time, foo, space {
    /* #CHECK:
    header: FuncletHeader {
    name: FuncletId(
        "foo_impl",
    ),
    args: [
        FuncletArgument {
            name: Some(
                NodeId(
                    "x%0",
                ),
            ),
            typ: TypeId(
                "&i32",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "_in_x",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "sptl",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Saved,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "_in_e",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
            ],
        },
    ],...
    binding: ScheduleBinding(
        ScheduleBinding {
            implicit_tags: (
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "_in_e",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "out",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
            ),
    #END */

    /* #CHECK:
    NamedNode {
    name: Some(
        NodeId(
            "[[temp:[a-zA-Z0-9_%]+]]::u",
        ),
    ),
    node: AllocTemporary {
        place: Filled(
            Gpu,
        ),
    #END */
    
    /* #CHECK:
    ScheduleCall {
    operations: Filled(
        [
            Filled(
                RemoteNodeId {
                    funclet: MetaId(
                        "val",
                    ),
                    node: Some(
                        Filled(
                            NodeId(
                                "_ty2",
                            ),
                        ),
                    ),
                },
            ),
            Filled(
                RemoteNodeId {
                    funclet: MetaId(
                        "sptl",
                    ),
                    node: None,
                },
            ),
            Filled(
                RemoteNodeId {
                    funclet: MetaId(
                        "tmln",
                    ),
                    node: Some(
                        Filled(
                            NodeId(
                                "_tret",
                            ),
                        ),
                    ),
                },
            ),
        ],
    ),
    callee_funclet_id: Filled(
        FuncletId(
            "bar_impl",
        ),
    ),
    callee_arguments: Filled(
        [
            Filled(
                NodeId(
                    "[[temp]]",
                ),
            ),
            Filled(
                NodeId(
                    "[[temp]]::u",
                ),
            ),
        ],
    ),
    #END */
    bar_impl(???)
}

fn bar_impl(f: Future'R) -> i32 
            impls bar_time, bar, space 
{
    ???;
    let f2 = submit e;
    let y = (await f2).y_gpu;
    let x2 = (await f).u;
    x2 + y
}

pipeline main { foo_impl }