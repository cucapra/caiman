#version 0.1.0

// A simple external function where a single encoding has multiple calls with
// a dependency between them.

extern(gpu) simple(x: i32) -> out: i32 {
    path : "gpu_external.comp",
    entry : "main",
    dimensions : 3,
    resource {
        group : 0,
        binding : 0,
        input : x
    },
    resource {
        group : 0,
        binding : 1,
        output : out
    }
}

val foo(x: i32) -> i32 {
    c :- 1
    r :- simple'<c, c, c>(x)
    h :- simple'<c, c, c>(r)
    returns h
}

tmln foo_time(e: Event) -> out: Event {
    enc1, enc2 :- encode_event(e)
    sub :- submit_event(enc2)
    snc :- sync_event(enc1, sub)
    returns snc
}

sptl foo_space(bs: BufferSpace) -> BufferSpace { returns bs }

fn foo_main(x: &i32) -> i32 
    impls foo, foo_time, foo_space
{
    @in { input: node(tmln.e) };
    let e = encode-begin @ node(tmln.(enc1, enc2)) gpu;
    encode e.copy[x_gpu <- x];
    encode e.call[t_gpu <- simple'<1, 1, 1>(x_gpu)];
    encode e.call[y_gpu <- simple'<1, 1, 1>(t_gpu)];
    let f = submit @ node(tmln.sub) e;


    let y = await @ node(tmln.snc) f;
    let result = y.y_gpu;
    @out { output: node(tmln.out), input: node(tmln.snc) };
    result

}

pipeline main {
    foo_main
}