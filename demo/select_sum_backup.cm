#version 0.1.0

feq sum {
    extern(cpu) pure sum1([i64; 4]) -> i64
    extern(cpu) pure sum2([i64; 4]) -> i64
}

val select_sum(v1: [i64; 4], v2: [i64; 4], v3: [i64; 4]) -> out: i64 {
    sum1 :- sum(v1)
    sum2 :- sum(v2)
    sum3 :- sum(v3)
    condition :- sum1 < 0
    result :- sum2 if condition else sum3
    returns result
}

sptl space(s: BufferSpace) -> BufferSpace { returns s }

tmln time(e: Event) -> Event { returns e }

fn select_sum_impl(
    v1: [i64; 4], 
    v2: [i64; 4], 
    v3: [i64; 4]
) 
-> i64 impls select_sum,time,space {
    if sum1(v1) < 0 {
        sum2(v2)
    }
    else {
        sum2(v3)
    }
}

pipeline main { select_sum_impl }