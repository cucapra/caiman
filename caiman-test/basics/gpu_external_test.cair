version 0.0.1

types [
    i32,
    native_value $native_i32 {
        type : i32
    },
    slot $slot_local {
        type : i32,
        stage : ready,
        place : local,
    },
    slot $slot_gpu {
        type : i32,
        stage : ready,
        place : gpu,
    },
    buffer $buffer_gpu {
        place : gpu,
        static_layout_opt : {
            alignment_bits : 0,
            byte_size : 1024
        },
    },
    event $event0 {
        place : local
    },
    space_buffer $buffer_space {},
]

external_gpu @trivial(%x : i32) -> [%out : i32] : "gpu_external.comp"
{
    resource {
        group : 0,
        binding : 0,
        input : %x,
    },
    resource {
        group : 0,
        binding : 1,
        output : %out,
    }
}

value @foo(%x : i32) -> i32 {
    %y = call @trivial(%x);
    %z = extract %y 0;
    return %z;
}

timeline @foo_time(%e : $event0) -> $event0 {
    %sub1 = submission-local->gpu %e;
    %sync1 = sync-local->gpu %sub1 %sub1;
    return %sync1;
}

schedule @foo_main(%s : $slot_local, %in_buff : $buffer_gpu, %out_buff : $buffer_gpu) -> $slot_gpu {
    %0 = alloc-gpu-i32 %in_buff @foo.%x;
    %1 = encode-copy-gpu %s %0;
    %2 = alloc-gpu-i32 %out_buff @foo.%z;
    %3 = encode-do-gpu @foo.%y(%0) -> %2;
    %4 = submit-gpu @foo_time.%sub1;
    %5 = encode-fence-gpu @foo_time.%sub1;
    %6 = sync-fence-local %5 @foo_time.%sync1;
    return %2;
}

spatial @foo_space(%bs : $buffer_space) -> $buffer_space {
    return %bs;
}

extras {
    @foo_main {
        value : @foo,
        input_slots : {
            %s : slot_info(value_tag input @foo.%x)
        },
        output_slots : {
            %s : slot_info(value_tag output @foo.%x, spatial_tag output @foo_space.%bs)
        },
        input_fences : {},
        output_fences : {},
        input_buffers : {%in_buff : buffer_info(spatial_tag input @foo_space.%bs),
            %out_buff : buffer_info(spatial_tag input @foo_space.%bs)},
        output_buffers : {},
        in_timeline_tag : timeline_tag input @foo_time.%e,
        out_timeline_tag : timeline_tag output @foo_time.%e,
    },
}

pipeline "main" = @foo_main;