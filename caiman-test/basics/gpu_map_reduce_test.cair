version 0.0.2

ffi i32;
native_value %i32n : i32;
ref %i32l : i32-local<flags=[map_read, map_write, copy_src, copy_dst, storage]>;
ref %i32g : i32-gpu<flags=[map_read, map_write, copy_src, copy_dst, storage]>;
event %event0;
buffer %buffer_gpu : gpu<flags = [map_read, map_write, copy_src, copy_dst, storage], alignment_bits = 0, byte_size = 1024>;
buffer_space %buff_space;

function @simple(%i32n) -> %i32n;
function @foo(%i32n) -> %i32n;
function @add(%i32n, %i32n) -> %i32n;


external-cpu-pure[impl @add] %add(i32, i32) -> i32;

external-gpu[impl @simple] %simple(%x : i32) -> [%out : i32]
{
    path : "gpu_external.comp",
    entry : "main",
    dimensionality : 3,
    resource {
        group : 0,
        binding : 0,
        input : %x
    },
    resource {
        group : 0,
        binding : 1,
        output : %out
    }
}

value[impl @foo] %foo(%x : %i32n, %z: %i32n) -> [%out: %i32n] {
    %c = constant %i32n 1;
    %y_t = call @simple(%c, %c, %c, %x);
    %y = extract %y_t 0;
    %y2_t = call @simple(%c, %c, %c, %z);
    %y2 = extract %y2_t 0;

    %r_t = call @add(%y, %y2);
    %r = extract %r_t 0;
    return %r;
    // return %y2;
}

timeline %foo_time(%e : %event0) -> [%out: %event0] {
    %enc = encoding-event %e [];
    %loc1 = extract %enc 0;
    %rem1 = extract %enc 1;
    %sub = submission-event %rem1;
    %enc2 = encoding-event %loc1 [%sub];
    %loc2 = extract %enc2 0;
    %rem2 = extract %enc2 1;
    %sub2 = submission-event %rem2;
    %snc = synchronization-event %loc2 %sub;
    %snc2 = synchronization-event %snc %sub2;
    return %snc2;
}

spatial %foo_space(%bs : %buff_space) -> %buff_space {
    return %bs;
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_main<$time.%e-usable, $time.%out-usable>
(%x_loc : $val.%x-usable %i32l, %z_loc: $val.%z-usable %i32l)
-> [%out : $val.%out-usable %i32n] {
    %c_loc = alloc-temporary local [storage] i32;
    %x_gpu = alloc-temporary gpu [storage, copy_dst] i32;
    %y_gpu = alloc-temporary gpu [storage, map_read] i32;
    %y_loc = alloc-temporary local [map_write] i32;

    %x_gpu2 = alloc-temporary gpu [storage, copy_dst] i32;
    %y_gpu2 = alloc-temporary gpu [storage, map_read] i32;
    %y_loc2 = alloc-temporary local [map_write] i32;
    %ret = alloc-temporary local [map_write] i32;
    // %x_loc = alloc-temporary local [map_write, copy_src] i32;

    // write-ref i32 %x -> %x_loc;

    local-do-builtin $val.%c() -> %c_loc;
    %c = read-ref i32 %c_loc;

    %enc = begin-encoding gpu $time.%enc [%x_gpu, %y_gpu] [];
    encode-copy %enc %x_loc -> %x_gpu;
    encode-do %enc %simple $val.%y_t(%c, %c, %c, %x_gpu) -> %y_gpu;
    %fnc = submit %enc $time.%sub;

    %enc2 = begin-encoding gpu $time.%enc2 [%x_gpu2, %y_gpu2] [%fnc];
    encode-copy %enc2 %z_loc -> %x_gpu2;
    encode-do %enc2 %simple $val.%y2_t(%c, %c, %c, %x_gpu2) -> %y_gpu2;
    %fnc2 = submit %enc2 $time.%sub2;

    sync-fence %fnc $time.%snc;
    sync-fence %fnc2 $time.%snc2;
    
    local-copy %y_gpu -> %y_loc;
    %a = read-ref i32 %y_loc;
    local-copy %y_gpu2 -> %y_loc2;
    %b = read-ref i32 %y_loc2;

   // return %b;

    local-do-external %add $val.%r_t(%a, %b) -> %ret;
    %result = read-ref i32 %ret;
    return %result;
}

pipeline "main" = %foo_main;