// Testing whether or not we "select" an order based on external hints
// Has two versions, this is the first, to avoid accidental selection
// Code is just "return (-x, y + 1)"
//   but in this version want to ensure that we run `-x` before `y + 1`

version 0.0.2

ffi i64;
event %event0;
buffer_space %buffspace;
native_value %i64 : i64;

function @neg(%i64) -> %i64;
function @add(%i64, %i64) -> %i64;
function @main(%i64, %i64) -> [%i64, %i64];

external-cpu-pure[impl @neg] %neg(i64) -> i64;
external-cpu-pure[impl @add] %add(i64, i64) -> i64;

value[impl default @main] %main(%x : %i64, %y : %i64) -> [%out1 : %i64, %out2 : %i64] {
    %one = constant %i64 1;

    %x_neg_t = call @neg(%x);
    %x_neg = extract %x_neg_t 0;
    %y_one_t = call @add(%y, %one);
    %y_one = extract %y_one_t 0;

    return [%x_neg, %y_one];
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%main_head<$time-usable, $time-usable>(
    %x : $val.%x-usable $time-usable $space-usable %i64,
    %y : $val.%y-usable $time-usable $space-usable %i64
) ->
[
    %_ : $val.%out1-usable $time-usable $space-usable %i64,
    %_ : $val.%out2-usable $time-usable $space-usable %i64
] {
    %_ = alloc-temporary local [] i64;
    %_ = alloc-temporary local [] i64;

    local-do-builtin ?() -> ?;
    %_ = read-ref ? ?;

    local-do-external %neg ? ? -> ?;
    local-do-external %add ? ? -> ?;

    %x_neg = read-ref ? ?;
    %y_one = read-ref ? ?;

    return [%x_neg, %y_one];
}

pipeline "main" = %main_head;