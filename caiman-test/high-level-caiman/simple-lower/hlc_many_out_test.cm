#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(s: BufferSpace) -> BufferSpace { returns s }

val main() -> i64 {
    a :- 0
    one, two, three, four, five, six, seven, eight, nine, ten :- nums(a)
    returns four
}

val nums(a: i64) -> (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) {
    one :- 1
    two :- 2
    three :- 3
    four :- 4
    five :- 5
    six :- 6
    seven :- 7
    eight :- 8
    nine :- 9
    ten :- 10
    returns (one, two, three, four, five, six, seven, eight, nine, ten)
}

fn main_func() -> i64 @ node(val.four)-usable impls main, time, space  {
    let a: i64 @ node(val.a) = 0;
    let one: i64 @ node(val.one), two: i64 @ node(val.two),
        three: i64 @ node(val.three), four: i64 @ node(val.four),
        five: i64 @ node(val.five), six: i64 @ node(val.six),
        seven: i64 @ node(val.seven), eight: i64 @ node(val.eight),
        nine: i64 @ node(val.nine), ten: i64 @ node(val.ten) 
        = nums_func(a) 
        @ node(val.(one, two, three, four, five, six, seven, eight, nine, ten));
    four
}

fn nums_func(a: i64 @ input(val.a)-usable) 
    -> (i64 @ output(val.one), i64 @ output(val.two), i64 @ output(val.three),
        i64 @ output(val.four), i64 @ output(val.five), i64 @ output(val.six),
        i64 @ output(val.seven), i64 @ output(val.eight), i64 @ output(val.nine),
        i64 @ output(val.ten)) 
    impls nums, time, space
{
    let one: i64 @ node(val.one) = 1;
    let two: i64 @ node(val.two) = 2;
    let three: i64 @ node(val.three) = 3;
    let four: i64 @ node(val.four) = 4;
    let five: i64 @ node(val.five) = 5;
    let six: i64 @ node(val.six) = 6;
    let seven: i64 @ node(val.seven) = 7;
    let eight: i64 @ node(val.eight) = 8;
    let nine: i64 @ node(val.nine) = 9;
    let ten: i64 @ node(val.ten) = 10;
    (one, two, three, four, five, six, seven, eight, nine, ten)
}

pipeline main { main_func }