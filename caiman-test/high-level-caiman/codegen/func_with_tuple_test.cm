#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }

val foo(a: i64, b: i64) -> (i64, i64) {
    one :- a if a < b else b
    returns (one, 2)
}


fn foo_impl(a: i64, b: i64) -> (i64, i64) impls foo, time, space {
    let one = if a < b {
        a
    } else {
        b
    };
    (one, 2)
}

val bar(a: i64, b: i64) -> (i64, i64) {
    x, y :- foo(a, b)
    returns (x * 2, y * 2)
}

fn bar_impl(a: i64, b: i64) -> (i64, i64) impls bar, time, space {
    let x, y = foo_impl(a, b);
    (x * 2, y * 2)
}

pipeline main { bar_impl }