//
// Implements the following Rust-ish code:
// fn select_sum(v1 : [i64; 4], v2 : [i64; 4], v3 : [i64; 4]) -> i64 {
//     if v1.iter().sum() < 0 {
//         v2.iter().sum()
//     } else {
//         v3.iter().sum()
//     }
// }
// Notably does the work on v2 and v3 in the select rather than before

version 0.0.2

ffi i64;
ffi array<i64, 4>;
ref %i64l : i64-local<flags=[]>;
event %event0;
buffer_space %buffspace;
native_value %array4 : array<i64, 4>;
native_value %i64 : i64;

function @sum(%array4) -> %i64;
function @is_negative(%i64) -> %i64;
function @select_sum(%array4) -> %i64;

external-cpu-pure[impl @sum] %sum(array<i64, 4>) -> i64;
external-cpu-pure[impl @is_negative] %is_negative(i64) -> i64;

value[impl default @select_sum] %main(%v1 : %array4, %v2 : %array4, %v3 : %array4) -> [%out : %i64] {
    %res = select %sel %left %right;
    return %res;

    %s_t = call @sum(%v1);
    %s = extract %s_t 0;
    %sel_t = call @is_negative(%s);
    %sel = extract %sel_t 0;

    %left_t = call @sum(%v2);
    %left = extract %left_t 0;
    %right_t = call @sum(%v3);
    %right = extract %right_t 0;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%select_sum_head<$time-usable, $time-usable>(
    %v1 : $val.%v1-usable $time-usable $space-usable %array4,
    %v2 : $val.%v2-usable $time-usable $space-usable %array4,
    %v3 : $val.%v3-usable $time-usable $space-usable %array4
) -> 
    $val.%out-usable $time-usable $space-usable %i64 
{
    %_ = alloc-temporary local [] i64;

    local-do-external %sum ? ? -> ?;
    %_ = read-ref i64 ?;

    local-do-external %is_negative ? ? -> ?;
    %sel = read-ref i64 ?;

    %djoin = default-join;
    %join = inline-join %select_sum_join [] %djoin;

    schedule-select %sel 
        [%select_sum_left, %select_sum_right] 
        [$val.%res, $time, $space] 
        (%v2, %v3) 
        %join;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%select_sum_left<$time-usable, $time-usable>(
    %v2 : phi-$val.%v2-usable $time-usable $space-usable %array4,
    %v3 : phi-$val.%v3-usable $time-usable $space-usable %array4
) -> 
    $val.%left-usable $time-usable $space-usable %i64
{
    %_ = alloc-temporary local [] i64;

    local-do-external %sum ? ? -> ?;
    %_ = read-ref ? ?;
    return ?;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%select_sum_right<$time-usable, $time-usable>(
    %v2 : phi-$val.%v2-usable $time-usable $space-usable %array4,
    %v3 : phi-$val.%v3-usable $time-usable $space-usable %array4
) -> 
    $val.%right-usable $time-usable $space-usable %i64
{
    %_ = alloc-temporary local [] i64;

    local-do-external %sum $val.%right_t ? -> ?;
    %_ = read-ref ? ?;
    return ?;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%select_sum_join<$time-usable, $time-usable>(
    %res : $val.%res-usable $time-usable $space-usable %i64
) -> 
    $val.%out-usable $time-usable $space-usable %i64
{
    return ?;
}

pipeline "main" = %select_sum_head;