#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }

val min(a: i32, b: i32) -> i32 {
    returns a if a < b else b
}

fn min(a: i32, b: i32) -> i32 
    impls min, time, space
{
    if a < b {
        return a;
    } else {
        return b;
    }
}

pipeline main { min }

// ===================== CAIR ===================
/*
version 0.0.2

type i64;
event %event0;
buffer_space %buffspace;
native_value %i64n : i64;
native_value %i8n : i8;

function @main(i64, i64) -> i64;
function @lt(i64, i64) -> i8;

extern-cpu-pure[impl @lt] %lt(%x : i64, %y: i64) -> [%out : i8];

value[impl default @main] %foo(%x: i64, %y: i64) -> i64 {
    %b_t = call @lt(a, b);
    %b = extract b 0;
    %r = select %b %y %x;
    return %r;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}


schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_main<none($time.%e)-usable, none($time.%e)-usable>
    (%a: input($val.%x)-usable none($space.%e)-usable none($time.%bs)-usable,
    %b: input($val.%y)-usable none($space.%e)-usable none($time.%bs)-usable) ->
    [%out : none($val.%result)-usable none($space.%none)-usable none($time.%none)-usable %i64n] 
{
    %is_min = alloc-temporary local i8;
    local-do-external %lt node($val.%b_t)(%a, %b) -> %is_min;
    %b_min = read-ref i8 %is_min;

    %djoin = default-join;
    %join = inline-join %foo_ret [] %djoin;

    schedule-select %b_min [%foo_left, %foo_right]
        [value node($val.%r), timeline none, spatial none]
        () %join;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_left<none($time.%e)-usable, none($time.%e)-usable>() -> [%out : %i64n] 
{
    %y_loc = alloc-temporary local i64;
    local-do-builtin node($val.%y)() -> %y_loc;
    return %y_loc;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_right<none($time.%e)-usable, none($time.%e)-usable>() -> [%out : %i64n] 
{
    %x_loc = alloc-temporary local i64;
    local-do-builtin node($val.%x)() -> %x_loc;
    return %x_loc;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_ret<none($time.%e)-usable, none($time.%e)-usable>
    (%arg : none($val.%result)-usable none($space.%none)-usable none($time.%none)-usable %i64n) ->
    [%out : none($val.%result)-usable none($space.%none)-usable none($time.%none)-usable %i64n] 
{
    return %arg;
}

*/