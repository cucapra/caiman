version 0.0.1

// ---

types [
    f32,f64,u8,u16,u32,u64,usize,i8,i16,i32,i64,array<i32, 2>,erased_length_array<u32>,
    tuple<f32, u8>,const_ref<u64>,mut_ref<const_ref<u64>>,const_slice<array<i32, 2>>,mut_slice<i32>,
    gpu_buffer_ref<i32>,gpu_buffer_slice<i32>,gpu_buffer_allocator,
    slot $slot0 {
        type : i64,
        stage : ready,
        place : local,
    },
    fence $fence0 {
        place : cpu
    },
    buffer $buffer0 {
        place : gpu,
        static_layout_opt : { // unnamed :hmmmm:
            alignment_bits : 4,
            byte_size : 8
        },
    },
    event $event0 {
        place : local
    },
    // naming is dumb, but the parser is sad if I have both buffer and buffer_space as keywords here
    space_buffer $buffer_space0 {} // note that {} is required, even though it's empty here
]

// ---

external_cpu i64 @do_thing_on_cpu(i64);
// the path is required, and is relative to where you run this thing at the moment (unfortunately)
external_gpu i64 @do_thing_on_gpu(%x : i64) : "caiman-test/programs/example.wgsl"
{
    resource {
        group : 0,
        binding : 0,
        input : %x,
    },
    resource {
        group : 0,
        binding : 1,
        output : %x,
    }
}

value i32 @foo(%test : i32) {
    %1 = constant 4i64;
    %3 = constant-unsigned 4u64;
    %2 = extract %1 0;
    %4 = call @simple(%1);
    %5 = select %1 %2 %3;
    %6 = call @do_thing_on_cpu(%1);
    %x = call @do_thing_on_gpu<%1>(%1);
    return %1; // todo: add more tail edges
}

value i64 @y(%abc : i64) {
    // pretty clunky tbh
    yield 0 [%abc] @foo %abc [%abc, %abc];
}

value i64 @j(%abc : i64) {
    jump %abc [%abc, %abc];
}

// Scheduling funclets pin down an implementation of a value funclet. You can write an explicit
// schedule for each value node; alternately, you can only schedule the "most important"
// computations yourself and let Caiman explicate the rest. (TODO: But explication is
// "all-or-nothing" right now, right?)
//
// Mathematically speaking, a scheduling funclet is a *function* which maps a value funclet to its
// implementation. However, it's a function which can only be applied once. The application occurs
// in the `extras` block and can be thought of as "binding" the scheduling funclet to a specific
// value funclet.
//
// It's worth noting that a scheduling funclet does not necesarilly schedule the entirety of the
// value funclet. For example: if value funclet `foo` calls a value function, you'll have *two*
// scheduling funclets. `foo`'s first scheduling funclet will schedule everything that should come
// before the call. It's `ScheduleCall` tail edge will choose a specific implementation of the value
// function and specify a continuation scheduling funclet to execute after the value function
// returns. The continuation funclet is `foo`'s second scheduling funclet and will schedule any
// remaining operations.
schedule $slot0 @bar($slot0) {
    %0 = phi 0;
    %x = alloc-temporary-local-i64 @foo.%1;
    %2 = encode-do-local @foo.%1() -> %x;
    %1 = create-local-i64 @foo.%x; // unbound slot
    %3 = drop %0;
    %4 = alloc-local-i64 %0 @foo.%1;
    %5 = encode-copy-cpu %2 %4;
    %6 = submit-cpu @foo.%1;
    %7 = encode-fence-cpu @foo.%3;
    %8 = sync-fence-cpu %7 @foo.%2;
    %9 = inline-join @foo [] %5;
    %10 = serialized-join @foo [] %5;
    %11 = default-join;
    return %x;
}

schedule i64 @scall(%abc : i64) {
    // Note that these are not parser-bound by funclet type, but (should be) managed by the typechecker
    schedule-call @j.%abc @foo [%abc, %abc] %abc;
}

schedule i64 @sselect(%abc : i64) {
    // Note that these are not parser-bound by funclet type, but (should be) managed by the typechecker
    schedule-select @y.%abc %abc [@foo, @j] [%abc, %abc] %abc;
}

schedule i64 @dalloc(%abc : i64) {
    // pretty clunky tbh -- note that `none` literally means `none`
    dynamic-alloc %abc [] [%abc, none, %abc] @foo @j %abc;
}

// Timeline funclets are used for timeline verification. Caiman uses them to (TODO: statically?
// dynamically?) check that resources aren't used before they're allocated/initialized. A sound
// timeline funclet extends a guarantee of soundness to compatible scheduling funclets and also
// serves as a useful way for the compiler to sanity check its output. (TODO: I know it helps with
// inter-funclet reasoning, but what makes it better at this than scheduling funclets?)
timeline $event0 @time(%e : $event0) {
    %1 = submission-cpu->gpu %e;
    %2 = sync-cpu->gpu %e %1;
    return %e;
}

spatial i64 @space(%b : $buffer_space0) {
    return %b;
}

value_function i64 @simple(i64) : [@foo];

// ---

extras {
    @bar {
        // This is where @bar is actually "applied" to @foo.
        //
        // Eventually, this should replace the hardcoded tags
        // inside the scheduling funclet itself, since the
        // scheduling funclet is meant to be a higher-order
        // function over value funclets.
        //
        // Since pipelines reference scheduling funclets
        // (not value funclets), this means that a scheduling
        // funclet can only be applied to a single value funclet.
        value : @foo,
        input_slots : {
            %0 : slot_info(value_tag input @foo.%test)
        },
        output_slots : {
            %0 : slot_info()
        },
        input_fences : {%0:fence_info(timeline_tag none)},
        output_fences : {},
        input_buffers : {%0:buffer_info(spatial_tag output @foo.%test)},
        output_buffers : {},
        in_timeline_tag : timeline_tag input @time.%e,
        out_timeline_tag : timeline_tag input @time.%e,
    },
}

// The pipeline's entry point refers to a scheduling funclet because the scheduling function
// determines the implementation of the value funclet. 
//
// TODO: Based off trivial.cair, it seems like you can also provide a value funclet here,
// in which case a schedule will be generated for you.
pipeline "pipeline_trivial" = @bar;
