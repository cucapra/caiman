version 0.0.1

// ---

types [
    f32,f64,u8,u16,u32,u64,usize,i8,i16,i32,i64,array<i32, 2>,erased_length_array<u32>,
    tuple<f32, u8>,const_ref<u64>,mut_ref<const_ref<u64>>,const_slice<array<i32, 2>>,mut_slice<i32>,
    gpu_buffer_ref<i32>,gpu_buffer_slice<i32>,gpu_buffer_allocator,
    slot $slot0 {
        type : i32,
        stage : ready,
        place : local,
    },
    event $event0 {
        place : local
    },
]

// ---

external_cpu i32 @do_thing_on_cpu(i32);
// the path is required, and is relative to where you run this thing at the moment (unfortunately)
external_gpu i32 @do_thing_on_gpu(i32 %x) : "caiman-test/src/programs/example.wgsl"
{
    resource {
        group : 0,
        binding : 0,
        input : %x,
    },
    resource {
        group : 0,
        binding : 1,
        output : %x,
    }
}

value i32 @foo(i32) {
    %0 = phi 0;
    %1 = constant 4i64;
    %3 = constant-unsigned 4u64;
    %2 = extract %1 0;
    %4 = call @simple(%1);
    %5 = select %1 %2 %3;
    %6 = call @do_thing_on_cpu(%1);
    %x = call @do_thing_on_gpu<%1>(%1);
    return %1; // todo: add more tail edges
}

schedule $slot0 @bar($slot0) {
    %0 = phi 0;
    %x = alloc-temporary-local-i64 @foo.%1;
    %2 = encode-do-local @foo.%1() -> %x;
    %1 = create-local-i64 @foo.%x; // unbound slot
    %3 = drop %0;
    %4 = alloc-local-i64 %0 @foo.%1;
    %5 = encode-copy-cpu %2 %4;
    %6 = submit-cpu @foo.%1;
    %7 = encode-fence-cpu @foo.%3;
    %8 = sync-fence-cpu %7 @foo.%2;
    %9 = inline-join @foo %5;
    %10 = serialized-join @foo %5;
    %11 = default-join;
    return %x;
}

timeline $event0 @time($event0) {
    %0 = phi 0;
    %1 = submission-cpu->gpu %0;
    %2 = sync-cpu->gpu %0 %1;
    return %0;
}

value_function i64 @simple(i64) : [@foo];

// ---

extras {
    @bar {
        value : @foo,
        input_slots : {
            %0 : slot_info(value_tag input @foo.%0)
        },
        output_slots : {
            %0 : slot_info()
        },
        input_fences : {%0:fence_info(timeline_tag none)},
        output_fences : {},
        input_buffers : {%0:buffer_info(spatial_tag output @foo.%0)},
        output_buffers : {},
        in_timeline_tag : timeline_tag input @time.%0,
        out_timeline_tag : timeline_tag input @time.%0,
    },
}

// ---

pipeline "pipeline_trivial" = @bar;