version 0.0.2

type i64;
ref %i64l : i64-local<flags=[]>;
event %event0;
buffer_space %buffspace;
native_value %i64n : i64;

function @main() -> i64;

value[impl default @main] %foo() -> i64 {
    %x = constant %i64n 0;
    %y = constant %i64n 1;
    %z = constant %i64n 2;
    %r = select %x %y %z;
    return %r;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
    %foo_main<$time.%e-usable, $time.%e-usable>() ->
    [%out : $val.%r-usable $space-usable $time.%e-usable %i64n] 
{
    %x_loc = alloc-temporary local [] i64;
    local-do-builtin $val.%x() -> %x_loc;
    %x_val = read-ref i64 %x_loc;

    %djoin = default-join;
    %join = inline-join %foo_ret [] %djoin;

    schedule-select %x_val [%foo_left, %foo_right]
        [value $val.%r, timeline $time, spatial $space]
        () %join;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
    %foo_left<$time.%e-usable, $time.%e-usable>() ->
    [%out : $val.%y-usable $space-usable $time.%e-usable %i64n] 
{
    %y_loc = alloc-temporary local [] i64;
    local-do-builtin $val.%y() -> %y_loc;
    %y_val = read-ref i64 %y_loc;

    return %y_val;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
    %foo_right<$time.%e-usable, $time.%e-usable>() ->
    [%out : $val.%z-usable $space-usable $time.%e-usable %i64n] 
{
    %z_loc = alloc-temporary local [] i64;
    local-do-builtin $val.%z() -> %z_loc;
    %z_val = read-ref i64 %z_loc;
    
    return %z_val;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_ret<$time.%e-usable, $time.%e-usable>
    (%r_val : $val.%r-usable $space-usable $time.%e-usable %i64n) ->
    [%out : $val.%r-usable $space-usable $time.%e-usable %i64n] 
{
    return %r_val;
}

pipeline "main" = %foo_main;