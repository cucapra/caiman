version 0.0.2

// is meant to parse, not to compile/run
// just a reference/test for syntax parsing
// the complete set of nodes parsable and all that

type f32;
type f64;
type u8;
type u16;
type u32;
type u64;
type usize;
type i8;
type i16;
type i32;
type i64;
type array<i32, 2>;
type erased_length_array<u32>;
type tuple<f32, u8>;
type const_ref<u64>;
type mut_ref<const_ref<u64>>;
type const_slice<array<i32, 2>>;
type mut_slice<i32>;
type gpu_buffer_ref<i32>;
type gpu_buffer_slice<i32>;
type gpu_buffer_allocator;
type cpu_buffer_allocator;
type cpu_buffer_ref<i64>;

native_value %native_i64 : i64;
ref %slot0 : i64-local<flags=[map_read,map_write,copy_src,copy_dst,storage,uniform]>;
fence %fence0 : cpu;
buffer %buffer0 : gpu<flags = [], alignment_bits = 4, byte_size = 8>;
encoder %encoder0 : gpu;
event %event0;
buffer_space %buffer_space0;

function @simple(i64) -> i64;

external-cpu-pure[impl @simple] %do_pure_thing_on_cpu(i64) -> i64;
external-cpu[impl @simple] %do_thing_on_cpu(i64) -> i64;
// the path is required, and is relative to where you run this thing at the moment (unfortunately)
external-gpu[impl @simple] %do_thing_on_gpu(%x : i64) -> [%out : i64]
{
    // I dunno if this is worth cleaning up, probably not
    path : "example.comp",
    entry : "main",
    dimensionality : 2,
    resource {
        group : 0,
        binding : 0,
        input : %x
    },
    resource {
        group : 0,
        binding : 1,
        output : %out
    }
}

function @simple_32(i32) -> i32;

value[impl @simple_32] %foo(%test : i32) -> [%out : i32] {
    %1 = constant %native_i64 4;
    %2 = extract %1 0;
    %4 = call @simple(%1);
    %5 = select %1 %2 %4;
    return [%1, %2];
}

value[impl @simple] %y(%abc : i64) -> [i64] {
    jump %abc [%abc, %abc];
}

timeline %time(%e : %event0) -> [%event_out : %event0] {
    %x = encoding-event %e [%e, %e];
    %y = submission-event %x;
    %2 = synchronization-event %e %x;
    return %e;
}

spatial %space(%b : %buffer_space0) -> [%iout : i64] {
    %_ = separated-buffer-space 3 %b;
    return %b;
}

// can syntactically be empty, even though this is meaningless
schedule[value $val = %foo] %bar<$val-usable, $val-dead>(%0 : %slot0) -> [%out : %slot0] {
    %x = alloc-temporary local [copy_dst, copy_src] i64;
    drop %0;
    %y = static-sub-alloc local i64 %x;
    %z = static-split local %y [1, 2, 3] ?;
    %_ = read-ref i64 %x;
    %_ = borrow-ref i64 %x;
    write-ref i64 %x -> %4;
    local-do-builtin $val(%x, %3) -> [%4, %0];
    local-do-external %do_pure_thing_on_cpu ?(%x, %3) -> [%4, %0];
    local-copy %x -> %3;
    %_ = begin-encoding local ?.?[%x, %3] [%4, %0];
    encode-do %x %do_pure_thing_on_cpu ?.%2() -> %x;
    encode-do %x %do_pure_thing_on_cpu $val.?() -> [%x, %y];
    encode-copy %z %x -> %y;
    %6 = submit %x ?;
    sync-fence %y ?;
    %9 = inline-join %foo [%x, %y] %5;
    %10 = serialized-join %foo [%y, %z] %5;
    %11 = default-join;
    %_ = promise-captures 5 %x;
    %_ = fulfill-captures %x [%y, %z] [%3];
    ???;
    return %x;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%scall<$time-usable, $time-saved>
(%abc : $val.%x-usable %slot0)
-> [%out : $val.%y-saved %slot0] {
    // Note that these are not parser-bound by funclet type, but (should be) managed by the typechecker
    schedule-call %bar[value ?,
        ?,
        $space](%abc, %abc) %abc;
}

// value, timeline, spatial order is mandatory (though you can freely omit one of course)
schedule[value $val = %foo, timeline $time = %tim, spatial $space = %space]
%sselect<$time.%e-saved, $time.%e-usable>
(%abc : $time.%e-saved $val.%x-usable %slot0)
-> $time.%e-saved $val.%x-dead %slot0 {
    schedule-select %abc [%bar, %scall][value ?,
        ?,
        $space](%abc, %abc) %abc;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%syield<$time.%e-usable, $time.%e-need>
(%abc : $time.%bs-dead %event0)
-> [%out : $time.%bs-need %buffer0] {
    schedule-call-yield %bar[value $val.%x,
        $time.%e,
        $space](%abc, %abc) %abc;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%debugtest<$time.%e-usable, $time.%e-dead>
(%abc : $space.%bs-dead %event0)
-> [%out : $space.%bs-need %buffer0] {
    debug-hole [%abc, %abc];
}

pipeline "pipeline_trivial" = %bar;