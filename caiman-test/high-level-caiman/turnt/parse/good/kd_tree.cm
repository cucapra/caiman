#version 0.1.0
const N = 102400
const LN = 1024

type gbuf = [f32]'<map_read, map_write, copy_src, 
    copy_dst, storage, alignment_bits = 512, byte_size = 6553600>

val min(a: i64, b: i64) -> i64 {
    returns a if a < b else b
}

fn min(a: i64, b: i64) -> i64 
    impls min, simple_tmln, simple_sptl
{
    let c = if a < b {
        a
    } else {
        b
    };
}

val dist2(a: f32, b: f32) -> f32 {
    a0, a1 :- a
    b0, b1 :- b
    returns (a0 - b0) * (a0 - b0) + (a1 - b1) * (a1 - b1)
}

fn dist2(a: f32, b: f32) -> f32 
    impls dist2, simple_tmln, simple_sptl {
    ???;
}

feq closest_point {
    extern(gpu) closest_point_gpu(p: f32, a: [[foo]; N]) 
        -> out: foo
    {
        path : "kd_tree.comp",
        entry : "main",
        dimensions : 2,
        resource {
            group : 0,
            binding : 0,
            input : p
        },
        resource {
            group : 0,
            binding : 1,
            input : a
        },
        resource {
            group : 0,
            binding : 2,
            output : out
        }
    }

    val closest_point_host(p: f32, a: [f32]) -> f32
    {
        empty :- a.len() <= 0
        a_hd, a_tl :- split(a)
        returns (F32_NAN, F32_NAN) if empty else closest_point_host_rec(p, a_tl, a_hd)
    }
}

val closest_point_host_rec(p: f32, a: [f32], min_dist: f32) 
    -> f32 
{
    a_hd, a_tl :- split(a)
    min :- a_hd if dist2(p, a_hd) < dist2(p, min_dist) else min_dist
    rec :- a.len() > 0
    returns closest_point_host_rec(p, a_tl, min) if rec else min_dist
}

fn closest_point_host_rec(p: f32, a: [f32], min_dist: f32) 
    -> f32 impls closest_point_host_rec, simple_sptl, simple_tmln
{
    let c = if a.len() > 0 {
        let a_hd, a_tl = split(a);
        let min = a_hd if dist2(p, a_hd) < dist2(p, min_dist) else min_dist;
        closest_point_host_rec(p, a_tl, min)
    } else {
        min_dist
    };
    c

}

fn closest_point_host(p: f32, a: [f32]) -> (f32, f32)
    impls closest_point_host, simple_sptl, simple_tmln
{
    let c = if a.len() <= 0 {
        (F32_NAN, F32_NAN)
    } else {
        let a_hd, a_tl = split(a);
        closest_point_host_rec(p, a_tl, a_hd)
    };
    c
}


tmln simple_tmln(e: Event) -> Event { returns e }
sptl simple_sptl(b: BufferSpace) -> BufferSpace { returns b }

val find_closest(p: f32, pts: [f32; N], start: i64, end: i64, idx: i64) 
    -> f32 
{
    mdpt :- (start + end) / 2
    nxt_idx :- 0 if idx else 1
    len :- end - start
    // mdpt +/- 1 so that we can also pick up the closest point on the other side of the border
    nxt_start :- mdpt - 1 if idx == 0 && p.t0 >= pts[mdpt].t0 || 
                            idx == 1 && p.t1 >= pts[mdpt].t1
                        else start
    nxt_end :- mdpt + 1 if idx == 0 && p.t0 < pts[mdpt].t0 ||
                        idx == 1 && p.t1 < ptr[mdpt].t1
                    else end
    res :- find_closest(p, pts, nxt_start, nxt_end, nxt_idx) if len > LN else 
            closest_point(p, pts[start .. end])
    returns res
}

tmln tm(e: Event) -> Event {
    enc1, enc2 :- encoding_event(e, [])
    sub :- submission_event(enc2)
    snc :- synchronization_event(enc1, sub)
    returns snc
}

sptl sp(bs: BufferSpace) -> BufferSpace {
    returns bs
}

fn find_closest(p: f32, pts: [f32; N], start: i64, 
    end: i64, idx: i64) -> f32 impls find_closest, tm, sp
{
    let r = if end - start <= LN {
        let e: foo = create_gpu_encoder();
        e.copy[slice: gbuf <- pts[start .. end]];
        e.copy[p_gpu <- p];
        e.call[r <- closest_point_gpu'<8, 8>(p_gpu, slice)];

        let f = e.submit();
        let res = await(f);
        res.r
    } else {
        let mdpt = (start + end) / 2;

        var nxt_start = start;
        if idx == 0 && p.t0 >= pts[mdpt].t0 || idx == 1 && p.t1 >= pts[mdpt].t1 {
            nxt_start = mdpt - 1;
        }

        var nxt_end = end;
        if idx == 0 && p.t0 < pts[mdpt].t0 || idx == 1 && p.t1 < pts[mdpt].t1 {
            nxt_end = mdpt + 1;
        }

        var nxt_idx = 0;
        if idx == 0 {
            nxt_idx = 1;
        }

        find_closest(p, pts, next_start, nxt_end, nxt_idx)
    };
    r
}

val find_closest_point(p: f32, a: [f32; N]) -> f32 {
    returns find_closest(p, a, 0, N, 0)
}

fn find_closest_point(p: f32, a: [f32; N]) 
    -> f32 impls find_closest_point, simple_tmln, simple_sptl 
{
    find_closest(p, a, 0, N, 0)

}

pipeline main {
    find_closest_point
}