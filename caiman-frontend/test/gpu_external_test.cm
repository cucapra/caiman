extern(gpu) simple<wx, wy, wz>(x: i32) -> i32 {
    path : "gpu_external.comp",
    entry : "main",
    dimensionality : 3,
    resource {
        group : 0,
        binding : 0,
        input : x
    },
    resource {
        group : 0,
        binding : 1,
        output : %out
    }
}

val foo(x: i32) -> i32 {
    c :- 1i32.
    returns simple<c, c, c>(x).
}

timeline foo_time(e: event) -> event {
    enc1, enc2 :- encoding-event e [].
    sub :- submission-event enc2.
    snc :- synchronization-event enc1 sub.
    returns snc.
}

fn foo_main(x: i32) -> i32 
    impls foo, foo_time, foo_space
{
    let c : i32<storage> = 1i32 @ [node(foo.c)];
    let e = new_gpu_encoder();
    e.encode_cpy[x_gpu <- x];
    e.encode[y_gpu <- simple<c, c, c>(x_gpu)];
    let f = e.submit();


    let y = await f;
    let result = y.y_gpu;
    return result;

}

pipeline main {
    foo_main
}