#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }


val main() -> i64 {
    pass :- 10

    b :- true
    c :- false
    d :- false
    one :- 1
    two :- 2
    three :- 3
    four :- 4

    ll :- one + pass
    lr :- two + pass
    rl :- three + pass
    rr:- four + pass

    left :- ll if b else lr
    right :- rl if c else rr
    z :- left if d else right
    returns z
}

fn foo() -> i64
    impls main, time, space
{
    let d: bool @ node(val.d) = false;
    let pass: i64 @ node(val.pass) = 10;
    let v: i64 @ node(val.z) = if @ node(val.z) d {
        let b: bool @ node(val.b) = true;
        let r: i64 @ node(val.left) = if @ node(val.left) b {
            let one: i64 @ node(val.one) = 1;
            let ll: i64 @ node(val.ll) = one + pass;
            ll
        } else {
            let two: i64 @ node(val.two) = 2;
            let lr: i64 @ node(val.lr) = two + pass;
            lr
        };
        r
    } else {
        let c: bool @ node(val.c) = false;
        let r: i64 @ node(val.right) = if @ node(val.right) c {
            let three: i64 @ node(val.three) = 3;
            let rl: i64 @ node(val.rl) = three + pass;
            rl
        } else {
            let four: i64 @ node(val.four) = 4;
            let rr: i64 @ node(val.rr) = four + pass;
            rr
        };
        r    
    };
    v
}

pipeline main { foo }