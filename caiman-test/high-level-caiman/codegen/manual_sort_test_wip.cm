#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }

val sort(a: i64, b: i64) -> (i64, i64) {
    returns (a, b) if a < b else (b, a)
}

fn sort_impl(a: i64, b: i64) -> (i64, i64) impls sort, time, space {
    if a < b {
        (a, b)
    } else {
        (b, a)
    }
}


val s4(a: i64, b: i64, c: i64, d: i64) -> (i64, i64, i64, i64) {
    x, y :- sort(a, b)
    z, w :- sort(c, d)
    returns (x, y, z, w) if x <= z && y <= z else
            (x, z, y, w) if x <= z && z <= y && y <= w else 
            (x, z, w, y) if x <= z && w <= y else
            (z, w, x, y) if z <= x && w <= x else
            (z, x, w, y) if z <= x && x <= w && w <= y else
            (z, x, y, w)
}

fn s4_impl(a: i64, b: i64, c: i64, d: i64) -> (i64, i64, i64, i64) 
    impls s4, time, space 
{
    let x, y = sort_impl(a, b);
    let z, w = sort_impl(c, d);
    if x <= z && y <= z {
        (x, y, z, w)
    } else if x <= z && z <= y && y <= w {
        (x, z, y, w)
    } else if x <= z && w <= y {
        (x, z, w, y)
    } else if z <= x && w <= x {
        (z, w, x, y)
    } else if z <= x && x <= w && w <= y {
        (z, x, w, y)
    } else {
        (z, x, y, w)
    }
}

val main(a: i64, b: i64, c: i64, d: i64, e: i64, f: i64, g: i64, h: i64) 
    -> (i64, i64, i64, i64) 
{
    x, y, z, w :- s4(a, b, c, d)
    i, j, k, l :- s4(e, f, g, h)
    s1 :- x + y + z + w
    s2 :- i + j + k + l
    one :- x if s1 < s2 else i
    two :- y if s1 < s2 else j
    three :- z if s1 < s2 else k
    four :- w if s1 < s2 else l
    returns (one, two, three, four)
}

fn main_impl(a: i64, b: i64, c: i64, d: i64, e: i64, f: i64, g: i64, h: i64) 
    -> (i64, i64, i64, i64) impls main, time, space
{
    let x, y, z, w = s4_impl(a, b, c, d);
    let i, j, k, l = s4_impl(e, f, g, h);
    let s1 = x + y + z + w;
    let s2 = i + j + k + l;
    let one = if s1 < s2 {
        x
    } else {
        i
    };
    let two = if s1 < s2 {
        y
    } else {
        j
    };
    let three = if s1 < s2 {
        z
    } else {
        k
    };
    let four = if s1 < s2 {
        w
    } else {
        l
    };
    (one, two, three, four)
}

pipeline main { main_impl }