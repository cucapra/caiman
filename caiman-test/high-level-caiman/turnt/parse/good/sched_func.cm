#version 0.1.0
type gint = i32'<storage>;

fn foo(a: gint'<map_write> @ ?(?)-?, 
       b: bool @ [],
       c: i64'<map_read, alignment_bits = 512> @ [?(v.y)-dead, none(tm)-?, ?(?)-?]) 
       -> i32'<storage, map_write>
        impls v, tm, sp
{
    let x: i32'<map_read> @ node(val.x)-? = 10 + 20 @ node(val.z)-? * call'<10, 30>(c) @ node(val.y)-?;
    let y = call'<c * c, c + c>(b, b, c);
    let f = [call(10 + 10), foo'<c>(20 * 20)];
}