version 0.0.2

// This test starts submits work on the GPU,
// then passes the future to another function to wait for it later.
// The callee does some work in parallel and waits for both results

// This is the same as `gpu_call_sync_test`, but it continues to pass around the 
// copied encoded variables after submitting

// In psuedo-hlc:
// fn bar(r: future<i32>) -> i32 {
//     let f = encode %simple(3);
//     return r.wait() + f.wait();
// }

// fn main(x: i32) -> i32 {
//     let f = encode simple(x);
//     let r = bar(y);
//     return r;
// }

ffi i32;
native_value %i32 : i32;
ref %i32l : i32-local<flags=[map_read, map_write, copy_src, copy_dst, storage]>;
ref %i32g : i32-gpu<flags=[map_read, map_write, copy_src, copy_dst, storage]>;
ref %i32gd : i32-gpu<flags=[map_read, storage]>;
ref %i32gs : i32-gpu<flags=[copy_dst, storage]>;
event %event0;
fence %fence0 : gpu;
buffer %buffer_gpu : gpu<flags = [map_read, map_write, copy_src, copy_dst, storage], alignment_bits = 0, byte_size = 1024>;
buffer_space %buff_space;

function @simple(%i32) -> %i32;
function @foo(%i32) -> %i32;
function @bar(%i32) -> %i32;
function @bar_time(%event0, %fence0) -> %event0;
function @add(%i32, %i32) -> %i32;

external-cpu-pure[impl @add] %add(i32, i32) -> i32;

external-gpu[impl @simple] %simple(%x : i32) -> [%out : i32]
{
    path : "gpu_external.comp",
    entry : "main",
    dimensionality : 3,
    resource {
        group : 0,
        binding : 0,
        input : %x
    },
    resource {
        group : 0,
        binding : 1,
        output : %out
    }
}

value[impl @foo] %foo(%x : %i32) -> [%out: %i32] {
    %c = constant %i32 1;
    %y_t = call @simple(%c, %c, %c, %x);
    %y = extract %y_t 0;

    %y2_t = call @bar(%y, %x);
    %y2 = extract %y2_t 0;
    return %y2;
}

value[impl @bar] %bar(%x : %i32, %other: %i32) -> [%out: %i32] {
    %c = constant %i32 1;
    %g = constant %i32 3;
    %y_t = call @simple(%c, %c, %c, %g);
    %y = extract %y_t 0;

    %r_t = call @add(%x, %y);
    %r = extract %r_t 0;
    return %r;
}

timeline[impl @bar_time] %bar_time(%e : %event0, %f: %fence0) -> [%out: %event0] {
    %enc2 = encoding-event %e [%f];
    %loc2 = extract %enc2 0;
    %rem2 = extract %enc2 1;
    %sub2 = submission-event %rem2;
    %snc2 = synchronization-event %loc2 %sub2;
    %snc3 = synchronization-event %snc2 %f;
    return %snc3;
}

timeline %foo_time(%e : %event0) -> [%out: %event0] {
    %enc = encoding-event %e [];
    %loc1 = extract %enc 0;
    %rem1 = extract %enc 1;
    %sub = submission-event %rem1;
    // %snc = synchronization-event %loc1 %sub;

    %ret_t = call @bar_time(%loc1, %sub);
    %ret = extract %ret_t 0;
    return %ret;
}

spatial %foo_space(%bs : %buff_space) -> %buff_space {
    return %bs;
}

schedule[value $val = %bar, timeline $time = %bar_time, spatial $space = %foo_space]
%bar_main<$time.%e-usable, $time.%out-usable>
    (%x2 : $val.%x-usable $space-saved $time.%f-usable %i32gd,
    %other: $val.%other-usable $space-saved $time.%f-usable %i32gs,
    %f : $time.%f-usable %fence0)
-> [%out : $val.%out-usable %i32] {
    %c_loc = alloc-temporary local [storage] i32;
    %g_loc = alloc-temporary local [storage, copy_src] i32;
    %x_gpu = alloc-temporary gpu [storage, copy_dst] i32;
    %y_gpu = alloc-temporary gpu [storage, map_read] i32;
    %y_loc = alloc-temporary local [map_write] i32;
    %y1_loc = alloc-temporary local [map_write] i32;
    %out_ref = alloc-temporary local [map_write] i32;

    local-do-builtin $val.%c() -> %c_loc;
    local-do-builtin $val.%g() -> %g_loc;
    %enc = begin-encoding gpu $time.%enc2 [%x_gpu, %y_gpu] [%f];
    encode-copy %enc %g_loc -> %x_gpu;
    %c = read-ref i32 %c_loc;
    encode-do %enc %simple $val.%y_t(%c, %c, %c, %x_gpu) -> %y_gpu;

    %fnc = submit %enc $time.%sub2;
    sync-fence %fnc $time.%snc2;
    sync-fence %f $time.%snc3;
    
    local-copy %y_gpu -> %y_loc;
    local-copy %x2 -> %y1_loc;
    %b = read-ref i32 %y_loc;
    %a = read-ref i32 %y1_loc;

    local-do-external %add $val.%r_t(%a, %b) -> %out_ref;
    %ret = read-ref i32 %out_ref;
    return %ret;
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_main<$time.%e-usable, $time.%out-usable>
(%x_loc : $val.%x-usable $time.%rem1-usable $space-saved %i32l)
-> [%out : $val.%out-usable %i32] {
    %c_loc = alloc-temporary local [storage] i32;
    %x_gpu = alloc-temporary gpu [storage, copy_dst] i32;
    %y_gpu = alloc-temporary gpu [storage, map_read] i32;

    local-do-builtin $val.%c() -> %c_loc;
    %enc = begin-encoding gpu $time.%enc [%x_gpu, %y_gpu] [];
    encode-copy %enc %x_loc -> %x_gpu;
    %c = read-ref i32 %c_loc;
    encode-do %enc %simple $val.%y_t(%c, %c, %c, %x_gpu) -> %y_gpu;

    %fnc = submit %enc $time.%sub;
    
    %join = default-join;
    %djoin = inline-join %foo_ret [] %join;
    schedule-call %bar_main[$val.%y2_t, $time.%ret_t, $space] (%y_gpu, %x_gpu, %fnc) %djoin;
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_ret<$time.%ret-usable, $time.%out-usable>
(%x : $val.%y2-usable %i32)
-> [%out : $val.%out-usable %i32] {
    return %x;
}

pipeline "main" = %foo_main;