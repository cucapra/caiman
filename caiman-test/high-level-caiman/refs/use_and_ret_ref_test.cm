#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(s: BufferSpace) -> BufferSpace { returns s }

val main() -> i64 {
    c :- 1
    x, y :- one(c)
    returns x + y
}

val one(a: i64) -> (i64, i64) {
    returns (a, a + 1)
}


fn main_func() -> i64 impls main, time, space  
{
    var x = 1;
    var y = x;
    let a, r = one_func(&y);
    *a + r
}

fn one_func(a: &i64) -> (&i64, i64) 
    impls one, time, space
{
    var r = *a;
    r = r + 1;
    (a, r)
}

pipeline main { main_func }