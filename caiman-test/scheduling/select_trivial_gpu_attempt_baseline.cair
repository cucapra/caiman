version 0.0.1

types [
    i32,
    i64,
    native_value $native_i32 {
        type : i32
    },
    slot $slot_local {
        type : i32,
        stage : ready,
        place : local,
    },
    slot $slot_gpu {
        type : i32,
        stage : ready,
        place : gpu,
    },
    buffer $buffer_gpu {
        place : gpu,
        static_layout_opt : {
            alignment_bits : 0,
            byte_size : 1024
        },
    },
    event $event0 {
        place : local
    },
    space_buffer $buffer_space {},
]

external_cpu @flatten(i64) -> i32;

value @foo() -> i32 {
    %xc = constant 0i64;
    %yc = constant 1i64;
    %zc = constant 2i64;

    %x_t = call @flatten(%xc);
    %x = extract %x_t 0;
    %y_t = call @flatten(%yc);
    %y = extract %y_t 0;
    %z_t = call @flatten(%zc);
    %z = extract %z_t 0;

    %r = select %x %y %z;
    return %r;
}

schedule @foo_main(%s : $slot_local, %in_buff : $buffer_gpu, %out_buff : $buffer_gpu) -> $slot_gpu {
    %xc = alloc-temporary-local-i64 @foo.%xc;
    %_ = encode-do-local @foo.%xc() -> %xc;
    %x_local = alloc-temporary-local-i32 @foo.%x;
    %_ = encode-do-local @foo.%x_t(%xc) -> %x_local;
    %x = alloc-gpu-i32 %in_buff @foo.%x;
    %_ = encode-copy-gpu %x_local %x;

    %r = alloc-gpu-i32 %out_buff @foo.%r;
    %default = default-join;
    %join = inline-join @foo_return [%r] %default;
    schedule-select @foo.%r %x [@foo1, @foo2] [%r, %out_buff, %out_buff] %join;
}

schedule @foo1(%r : $slot_gpu, %in_buff : $buffer_gpu, %out_buff : $buffer_gpu) -> $slot_gpu {
    %yc = alloc-temporary-local-i64 @foo.%yc;
    %_ = encode-do-local @foo.%yc() -> %yc;
    %y_local = alloc-temporary-local-i32 @foo.%y;
    %_ = encode-do-local @foo.%y_t(%yc) -> %y;
    %y = alloc-gpu-i32 %in_buff @foo.%y;
    %_ = encode-copy-gpu %y_local %y;

    %_ = encode-copy-gpu %y %r;
    return %y;
}

schedule @foo2(%r : $slot_gpu, %in_buff : $buffer_gpu, %out_buff : $buffer_gpu) -> $slot_gpu {
    %zc = alloc-temporary-local-i64 @foo.%zc;
    %_ = encode-do-local @foo.%zc() -> %zc;
    %z_local = alloc-temporary-local-i32 @foo.%z;
    %_ = encode-do-local @foo.%z_t(%zc) -> %z;
    %z = alloc-gpu-i32 %in_buff @foo.%z;
    %_ = encode-copy-gpu %z_local %z;

    %_ = encode-copy-gpu %z %r;
    return %z;
}

schedule @foo_return(%r : $slot_gpu, %in_buff : $buffer_gpu, %out_buff : $buffer_gpu) -> $slot_gpu {
    return %r;
}

timeline @time(%e : $event0) -> $event0 {
    return %e;
}

spatial @foo_space(%bs : $buffer_space) -> $buffer_space {
    return %bs;
}

extras {
    @foo_main {
        value : @foo,
        input_slots : {
            %s : slot_info()
        },
        output_slots : {
            %s : slot_info(spatial_tag output @foo_space.%bs)
        },
        input_fences : {},
        output_fences : {},
        input_buffers : {%in_buff : buffer_info(spatial_tag input @foo_space.%bs),
            %out_buff : buffer_info(spatial_tag input @foo_space.%bs)},
        output_buffers : {},
        in_timeline_tag : timeline_tag output @time.%e,
        out_timeline_tag : timeline_tag output @time.%e,
    },
    @foo1 {
        value : @foo,
        input_slots : {
            %r : slot_info()
        },
        output_slots : {
            %r : slot_info(spatial_tag output @foo_space.%bs)
        },
        input_fences : {},
        output_fences : {},
        input_buffers : {%in_buff : buffer_info(spatial_tag input @foo_space.%bs),
                    %out_buff : buffer_info(spatial_tag input @foo_space.%bs)},
        output_buffers : {},
        in_timeline_tag : timeline_tag output @time.%e,
        out_timeline_tag : timeline_tag output @time.%e,
    },
    @foo2 {
        value : @foo,
        input_slots : {
            %r : slot_info()
        },
        output_slots : {
            %r : slot_info(spatial_tag output @foo_space.%bs)
        },
        input_fences : {},
        output_fences : {},
        input_buffers : {%in_buff : buffer_info(spatial_tag input @foo_space.%bs),
                    %out_buff : buffer_info(spatial_tag input @foo_space.%bs)},
        output_buffers : {},
        in_timeline_tag : timeline_tag output @time.%e,
        out_timeline_tag : timeline_tag output @time.%e,
    },
    @foo_return {
        value : @foo,
        input_slots : {
            %r : slot_info()
        },
        output_slots : {
            %r : slot_info(spatial_tag output @foo_space.%bs)
        },
        input_fences : {},
        output_fences : {},
        input_buffers : {%in_buff : buffer_info(spatial_tag input @foo_space.%bs),
                    %out_buff : buffer_info(spatial_tag input @foo_space.%bs)},
        output_buffers : {},
        in_timeline_tag : timeline_tag output @time.%e,
        out_timeline_tag : timeline_tag output @time.%e,
    },
}

pipeline "main" = @foo_main;