#version 0.1.0

extern(gpu) simple(x : i32) -> out: i32
{
    path : "gpu_external.comp",
    entry : "main",
    dimensions : 3,
    resource {
        group : 0,
        binding : 0,
        input : x
    },
    resource {
        group : 0,
        binding : 1,
        output : out
    }
}

val foo(x : i32) -> i32 {
    c :- 1
    y :- simple'<c, c, c>(x)

    y2 :- bar(y)
    returns y2
}

val bar(x : i32) -> i32 {
    c :- 1
    returns simple'<c, c, c>(x)
}

tmln foo_time(e : Event) -> out: Event {
    loc1, rem1 :- encode_event(e)
    sub :- submit_event(rem1)
    snc :- sync_event(loc1, sub)

    loc2, rem2 :- encode_event(snc)
    sub2 :- submit_event(rem2)
    snc2 :- sync_event(loc2, sub2)
    returns snc2
}

sptl foo_space(bs : BufferSpace) -> BufferSpace {
    returns bs
}

fn foo_impl(x: &i32) -> i32 impls foo_time, foo_space, foo {
    bar_impl(???)
    /* #CHECK:
    header: FuncletHeader {
        name: FuncletId(
            "_foo_impl2",
        ),
        args: [
            FuncletArgument {
                name: Some(
                    NodeId(
                        "_f1%0",
                    ),
                ),
                typ: TypeId(
                    "i32",
                ),
                tags: [
                    Tag {
                        quot: Filled(
                            RemoteNodeId {
                                funclet: MetaId(
                                    "val",
                                ),
                                node: Some(
                                    Filled(
                                        NodeId(
                                            "y2",
                                        ),
                                    ),
                                ),
                            },
                        ),
                        flow: Filled(
                            Usable,
                        ),
                    },
                    Tag {
                        quot: Filled(
                            RemoteNodeId {
                                funclet: MetaId(
                                    "sptl",
                                ),
                                node: None,
                            },
                        ),
                        flow: Filled(
                            Usable,
                        ),
                    },
                    Tag {
                        quot: Filled(
                            RemoteNodeId {
                                funclet: MetaId(
                                    "tmln",
                                ),
                                node: Some(
                                    Filled(
                                        NodeId(
                                            "snc2",
                                        ),
                                    ),
                                ),
                            },
                        ),
                        flow: Filled(
                            Usable,
                        ),
                    },
                ],
            },
        ],...
        binding: ScheduleBinding(
            ScheduleBinding {
                implicit_tags: (
                    Tag {
                        quot: Filled(
                            RemoteNodeId {
                                funclet: MetaId(
                                    "tmln",
                                ),
                                node: Some(
                                    Filled(
                                        NodeId(
                                            "snc2",
                                        ),
                                    ),
                                ),
                            },
                        ),
                        flow: Filled(
                            Usable,
                        ),
                    },
                    Tag {
                        quot: Filled(
                            RemoteNodeId {
                                funclet: MetaId(
                                    "tmln",
                                ),
                                node: Some(
                                    Filled(
                                        NodeId(
                                            "out",
                                        ),
                                    ),
                                ),
                            },
                        ),
                        flow: Filled(
                            Usable,
                        ),
                    },
                ),
    #END */
}

fn bar_impl(x: i32 @ node(tmln.snc)) -> i32 impls foo_time, foo_space, bar {
    @in { input: node(tmln.snc) };
    @out { input: node(tmln.snc2), output: node(tmln.snc2) };
    ???
    /* #CHECK:
    name: FuncletId(
        "bar_impl",
    ),
    args: [
        FuncletArgument {
            name: Some(
                NodeId(
                    "x%0",
                ),
            ),
            typ: TypeId(
                "i32",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "_in_x",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "sptl",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "snc",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
            ],
        },
    ],
    ret: [
        FuncletArgument {
            name: None,
            typ: TypeId(
                "i32",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "_out0",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "sptl",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "snc2",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
            ],
        },
    ],
    binding: ScheduleBinding(
        ScheduleBinding {
            implicit_tags: (
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "snc",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "snc2",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
            ),
    #END */
}

pipeline main { foo_impl } 