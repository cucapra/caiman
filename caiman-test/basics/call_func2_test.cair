version 0.0.2

type i64;
event %event0;
buffer_space %buffspace;
native_value %ni64 : i64;

// A simple tests where a funclet invokes another and passes a value


function @main() -> i64;
function @foo(i64) -> i64;


// main

value[impl default @main] %main() -> i64 {
    %x = constant %ni64 -1;
    %y_t = call @foo(%x);
    %y = extract %y_t 0;
    return %y;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%main_head<$time-usable, $time-usable>() ->
    [%out : $val.%y-usable $time-usable $space-usable %ni64]
{
    %x_ref = alloc-temporary local [] i64;
    local-do-builtin $val.%x() -> %x_ref;
    %arg = read-ref i64 %x_ref;

    %default = default-join;
    %join = inline-join %main_ret [] %default;

    schedule-call %foo_impl[$val.%y_t, $time, $space](%arg) %join;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%main_ret<$time-usable, $time-usable>
    (%y : $val.%y-usable $time-usable $space-usable %ni64) ->
    [%out : $val.%y-usable $time-usable $space-usable %ni64]
{
    return %y;
}

// foo

value[impl default @foo] %foo(%i : %ni64) -> [%out : i64] {
    return %i;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_impl<$time-usable, $time-usable>
    (%arg : $val.%i-usable $time-usable $space-usable %ni64) ->
    [%out : $val.%out-usable $time-usable $space-usable %ni64]
{
    return %arg;
}



pipeline "main" = %main_head;