#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }


val main() -> res: i64 {
    b :- true
    c :- false
    d :- false
    one :- 1
    two :- 2
    three :- 3
    four :- 4
    left :- one if b else two
    right :- three if c else four
    z :- left if d else right
    returns z
}

fn foo() -> i64 @ node(val.res)-usable 
    impls main, time, space
{
    let c: bool @ node(val.c) = false;
    var v: i64 @ node(val.four) = 4;
    if @ node(val.right) c {
        let three: i64 @ node(val.three) = 3;
        v = three;
    }
    @in { v: [node(val.right)-usable, none(sptl)-saved] };

    let d: bool @ node(val.d) = false;
    if @ node(val.z) d {
        let b: bool @ node(val.b) = true;
        let two: i64 @ node(val.two) = 2;
        v = two;
        if @ node(val.left) b {
            let one: i64 @ node(val.one) = 1;
            v = one;
        }
        @in { v: [node(val.left)-usable, none(sptl)-saved] };
    }
    @in { v: [node(val.z)-usable, none(sptl)-saved] };
    v
}

pipeline main { foo }