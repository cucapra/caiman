#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }

val sort2(a: i64, b: i64) -> (i64, i64) {
    one :- a if a <= b else b
    two :- b if a <= b else a
    returns (one, two)
}

fn sort2_impl(a: i64, b: i64) -> (i64, i64) impls sort2, time, space {
    // another way to make copies, we can load from references multiple times
    var a2 = a;
    let a3 = &a2;
    var b2 = b;
    let b3 = &b2;
    let one = if a <= b { *a3 } else { *b3 };
    let two = if a <= b { *b3 } else { *a3 };
    (one, two)
}

val merge3(r: i64, a: i64, b: i64) -> (i64, i64, i64) {
    one :- r if r <= a else a

    rem :- a if r <= a else r

    two, three :- sort2(rem, b)

    returns (one, two, three)
}

fn merge3_impl(r: i64, a: i64, b: i64) -> (i64, i64, i64) 
    impls merge3, space, time
{
    // make copies so we don't consume the original values
    // can do this with either constants or variables
    var rr = r;
    var aa = a;
    let r2 = r;
    let a2 = a;
    
    let rem = if r2 <= a2 { a } else { r };
    let one = if r2 <= a2 { rr } else { aa };
    let two, three = sort2_impl(rem, b);
    (one, two, three)
}


val sort4(a: i64, b: i64, c: i64, d: i64) -> (i64, i64, i64, i64) {
    x, y :- sort2(a, b)
    z, w :- sort2(c, d)
    one :- x if x <= z else z

    rem :- y if x <= z else w

    f :- z if x <= z else x
    r :- w if x <= z else y

    two, three, four :- merge3(rem, f, r)

    returns (one, two, three, four)
}

fn sort4_impl(a: i64, b: i64, c: i64, d: i64) -> (i64, i64, i64, i64) 
    impls sort4, time, space 
{

    let x, y = sort2_impl(a, b);
    let z, w = sort2_impl(c, d);

    // need to make copies so we can consume them again
    let x2 = x;
    let z2 = z;
    let xx = x;
    let yy = y;
    let zz = z;
    let ww = w;

    let one = if x2 <= z2 { x } else { z };
    let rem = if x2 <= z2 { y } else { w };

    let f = if x2 <= z2 { zz } else { xx };
    let r = if x2 <= z2 { ww } else { yy };

    let two, three, four = merge3_impl(rem, f, r);

    (one, two, three, four)
}

val main(a: i64, b: i64, c: i64, d: i64, e: i64, f: i64, g: i64, h: i64) 
    -> (i64, i64, i64, i64) 
{
    x, y, z, w :- sort4(a, b, c, d)
    i, j, k, l :- sort4(e, f, g, h)
    s1 :- w - z - y - x
    s2 :- l - k - j - i
    one :- x if s1 < s2 else i
    two :- y if s1 < s2 else j
    three :- z if s1 < s2 else k
    four :- w if s1 < s2 else l
    returns (one, two, three, four)
}

/// Sorts two lists of 4 numbers `(a, b, c, d)` and `(e, f, g, h)`
/// Then returns the list, in sorted order, with the smallest resulting
/// value after reducing greatest to least via subtraction
fn main_impl(a: i64, b: i64, c: i64, d: i64, e: i64, f: i64, g: i64, h: i64) 
    -> (i64, i64, i64, i64) impls main, time, space
{
    let x, y, z, w = sort4_impl(a, b, c, d);
    let i, j, k, l = sort4_impl(e, f, g, h);
    let s1 = w - z - y - x;
    let s2 = l - k - j - i;

    // TODO: maybe some kind of ref and cpy keywords?
    // maybe a builtin clone() function?
    // ex: x.clone()

    let one = if s1 < s2 { x } else { i };
    let two = if s1 < s2 { y } else { j };
    let three = if s1 < s2 { z } else { k };
    let four = if s1 < s2 { w } else { l };
    (one, two, three, four)
}

pipeline main { main_impl }