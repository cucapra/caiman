version 0.0.2

// Depending on a given boolean, this program will encode either one of two
// kernel dispatches. This tests passing encoders to funclets

// In pseudo-hlc:
// fn foo(b: bool) -> i32 {
//     let e = encoder();
//     if b {
//         e.encode simple(1);
//     } else {
//         e.encode simple2(1);
//     }
//     e.submit();
//     return e.wait();
// }

type i32;
native_value %i32n : i32;
ref %i32l : i32-local<flags=[map_read, map_write, copy_src, copy_dst, storage]>;
ref %i32g : i32-gpu<flags=[map_read, map_write, copy_src, copy_dst, storage]>;
// gpu src reference
ref %i32gs : i32-gpu<flags=[storage, copy_dst]>;
// gpu dest reference
ref %i32gd : i32-gpu<flags=[storage, map_read]>;
event %event0;
fence %fence0 : gpu;
encoder %encoder0 : gpu;
buffer %buffer_gpu : gpu<flags = [map_read, map_write, copy_src, copy_dst, storage], alignment_bits = 0, byte_size = 1024>;
buffer_space %buff_space;

function @simple(i32) -> i32;
function @simple2(i32) -> i32;

function @foo(i32) -> i32;
function @add(i32, i32) -> i32;


external-cpu-pure[impl @add] %add(i32, i32) -> i32;

external-gpu[impl @simple] %simple(%x : i32) -> [%out : i32]
{
    path : "gpu_external.comp",
    entry : "main",
    dimensionality : 3,
    resource {
        group : 0,
        binding : 0,
        input : %x
    },
    resource {
        group : 0,
        binding : 1,
        output : %out
    }
}

external-gpu[impl @simple2] %simple2(%x : i32) -> [%out : i32]
{
    path : "gpu_external2.comp",
    entry : "main",
    dimensionality : 3,
    resource {
        group : 0,
        binding : 0,
        input : %x
    },
    resource {
        group : 0,
        binding : 1,
        output : %out
    }
}

value[impl @foo] %foo(%x : i32, %b : i32) -> [%out: i32] {
    %c = constant %i32n 1;
    %y_t = call @simple(%c, %c, %c, %x);
    %y = extract %y_t 0;
    %y2_t = call @simple2(%c, %c, %c, %x);
    %y2 = extract %y2_t 0;

    %ret = select %b %y %y2;
    return %ret;
}

timeline %foo_time(%e : %event0) -> [%out: %event0] {
    %enc = encoding-event %e [];
    %loc1 = extract %enc 0;
    %rem1 = extract %enc 1;
    %sub = submission-event %rem1;
    %snc = synchronization-event %loc1 %sub;
    return %snc;
}

spatial %foo_space(%bs : %buff_space) -> %buff_space {
    return %bs;
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_main<$time.%e-usable, $time.%out-usable>
    (%x_loc : $val.%x-usable $time.%e-usable %i32l,
    %b: $val.%b-usable %i32n)
    -> [%out : $val.%out-usable %i32n] 
{
    %c_loc = alloc-temporary local [storage] i32;
    %x_gpu = alloc-temporary gpu [storage, copy_dst] i32;
    %y_gpu = alloc-temporary gpu [storage, map_read] i32;

    local-do-builtin $val.%c() -> %c_loc;
    %c = read-ref i32 %c_loc;

    %enc = begin-encoding gpu $time.%enc [%x_gpu, %y_gpu] [];
    encode-copy %enc %x_loc -> %x_gpu;

    %default = default-join;
    %join = inline-join %foo_ret [] %default;

    schedule-select %b [%foo_left, %foo_right] 
        [$val.%ret, $time, $space] 
        (%enc, %x_gpu, %y_gpu, %c) %join;
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_left<$time.%loc1-usable, $time.%loc1-usable>
    (%enc : $time.%rem1-usable %encoder0, 
    %x_gpu: phi-$val.%x-usable $space-saved $time.%rem1-usable %i32gs, 
    %y_gpu : $val-dead $space-saved $time.%rem1-usable %i32gd, 
    %c : $val.%c-usable $time.%loc1-usable %i32n)
    -> [%out : $val.%y-usable $space-saved $time.%sub-usable %i32gd, %fence : $time.%sub-usable %fence0] 
{
    encode-do %enc %simple $val.%y_t(%c, %c, %c, %x_gpu) -> %y_gpu;
    %f = submit %enc $time.%sub;
    return [%y_gpu, %f];
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_right<$time.%loc1-usable, $time.%loc1-usable>
    (%enc : $time.%rem1-usable %encoder0, 
    %x_gpu: phi-$val.%x-usable $space-saved $time.%rem1-usable %i32gs, 
    %y_gpu : $val-dead $space-saved $time.%rem1-usable %i32gd, 
    %c : $val.%c-usable $time.%loc1-usable %i32n)
    -> [%out : $val.%y2-usable $space-saved $time.%sub-usable %i32gd, %fence : $time.%sub-usable %fence0] 
{
    encode-do %enc %simple2 $val.%y2_t(%c, %c, %c, %x_gpu) -> %y_gpu;
    %f = submit %enc $time.%sub;
    return [%y_gpu, %f];
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_ret<$time.%loc1-usable, $time.%out-usable>
    (%ret_gpu : $val.%ret-usable $space-saved $time.%sub-usable %i32gd, %f : $time.%sub-usable %fence0)
    -> [%out : $val.%out-usable %i32n] 
{
    sync-fence %f $time.%snc;
    %y_loc = alloc-temporary local [map_write] i32;
    local-copy %ret_gpu -> %y_loc;
    %y = read-ref i32 %y_loc;
    return %y;
}

pipeline "main" = %foo_main;