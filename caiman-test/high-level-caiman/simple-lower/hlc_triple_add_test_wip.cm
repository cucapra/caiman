#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }

val main() -> i64 {
    a :- 3
    b :- 5
    c :- 7
    d :- 9


    j :- add_three(a, b, c)
    k :- add_three(a, b, d)
    cond :- false

    r :- j if cond else k
    returns r
}

feq add_three {
    val add1(a: i64, b: i64, c: i64) -> i64 {
        t :- a + b
        t2 :- t + c
        returns t2
    }

    val add2(a: i64, b: i64, c: i64) -> i64 {
        t :- b + c
        t2 :- a + t
        returns t2
    }
}

fn add1_impl(a: i64 @ input(add1.a)-usable, 
             b: i64 @ input(add1.b)-usable, 
             c: i64 @ input(add1.c)-usable)
    -> i64 @ output(add1.t2)-usable impls add1, time, space
{
    let t: i64 @ node(add1.t) = a + b;
    let p: i64 @ node(add1.t2) = t + c;
    return p;
}

fn add2_impl(a: i64 @ input(add2.a)-usable, 
             b: i64 @ input(add2.b)-usable, 
             c: i64 @ input(add2.c)-usable)
    -> i64 @ output(add2.t2)-usable impls add2, time, space
{
    let t: i64 @ node(add2.t) = b + c;
    let p: i64 @ node(add2.t2) = a + t;
    return p;
}


fn main_impl() -> i64 @ node(main.c)-usable
    impls main, time, space
{
    let cond: bool @ node(main.cond) = false;
    var r: i64 @ none(main);
    if @ node(main.r) cond {
        let a: i64 @ node(main.a) = 3;
        let b: i64 @ node(main.b) = 5;
        let c: i64 @ node(main.c) = 7;
        let j: i64 @ node(main.j) = add1_impl(a, b, c) @ node(main.j);
        r = j;
    } else {
        let a: i64 @ node(main.a) = 3;
        let b: i64 @ node(main.b) = 5;
        let d: i64 @ node(main.d) = 9;
        let k: i64 @ node(main.k) = add2_impl(a, b, d) @ node(main.k);
        r = k;
    }
    @in {r: [node(main.r)-usable, none(space)-save]};
    return r;
    
}

pipeline main { main_impl }