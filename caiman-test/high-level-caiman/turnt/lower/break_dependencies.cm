

sptl space(bs: BufferSpace) -> BufferSpace { returns bs }
tmln time(e: Event) -> Event { returns e }

val calc() -> i64 { returns 1 }

fn calc_impl() -> i64 impls calc, space, time {
    1
}

extern(cpu) pure bar() -> i64
extern(cpu) pure baz(i64) -> i64

val foo() -> i64 {
    x :- bar()
    y :- baz(x)
    smth :- calc()
    z :- y + y
    returns z + z + smth + smth
}

fn foo_impl() -> i64 impls foo, time, space {
    let x = bar();
    var y;
    ???;
    let z = y + y;
    let s = calc_impl();
    /* #CHECK:
    name: FuncletId(
        "_foo_impl2",
    ),
    args: [
        FuncletArgument {
            name: Some(
                NodeId(
                    "_0y%0",
                ),
            ),
            typ: TypeId(
                "i64",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "y",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
    #END */

    var x2;
    ???;
    let y2 = baz(x2);
    let s2 = calc_impl();
    /* #CHECK:
    name: FuncletId(
        "_foo_impl3",
    ),
    args: [
        FuncletArgument {
            name: Some(
                NodeId(
                    "_0x2%0",
                ),
            ),
            typ: TypeId(
                "i64",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "x",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
    #END */

    ???;
    z + (y2 + y2) + s + s2

}