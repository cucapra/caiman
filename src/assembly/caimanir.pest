// Definitions
//   pest
WHITESPACE = _{ "\t" | " " | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* | "/*" ~ ((!"*"  | "*" ~ !"/") ~ ANY)* ~ "*/" }
sep = _{ WHITESPACE+ }

//   baseline
id = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
n = @{ ASCII_DIGIT+ }
str_single = @{ "'" ~ (!"'" ~ !NEWLINE ~ ANY)* ~ "'" }
str_double = @{ "\"" ~ (!"\"" ~ !NEWLINE ~ ANY)* ~ "\"" }
str = { str_single | str_double }

// special keywords
hole = @{ "?" }
node_hole = @{ "???" }
n_hole = { n | hole }
none = @{ "none" }
pure_keyword = @{ "pure" }
default_keyword = @{ "default" }
throwaway = @{ "_" }
impl_keyword = @{ "impl" }
impl_sep = ${ impl_keyword ~ sep }

name = ${ "%" ~ (id | n | throwaway) }
name_sep = ${ name ~ sep }
function_class_name = ${ "@" ~ id }
function_class_name_sep = ${ function_class_name ~ sep }
name_hole = { name | hole }
name_hole_sep = ${ name_hole ~ sep }
meta_name = ${ "$" ~ (id | throwaway) }
meta_name_sep = ${ meta_name ~ sep }
remote = ${ name ~ "." ~ name }
remote_sep = ${ remote ~ sep }
remote_hole = { name_hole ~ "." ~ name_hole | hole }
meta_remote_inner = ${ meta_name ~ "." ~ name }
meta_remote = { remote | meta_remote_inner }

//    ffi_types
ffi_type_base = { "i32" | "f32" | "f64" | "u8" | "u16" | "u32" | "u64" | "usize" | "i8" |
                      "i16" | "i32" | "i64" | "gpu_buffer_allocator" | "cpu_buffer_allocator" }
ffi_array_parameters = { "<" ~ ffi_type ~ "," ~ n ~ ">" }
ffi_tuple_parameters = { "<" ~ ffi_type ~ ("," ~ ffi_type)* ~ ">" } // must have at least one field
ffi_parameterized_ref_name = { "erased_length_array" | "const_ref" |
    "mut_ref" | "const_slice" | "mut_slice" | "gpu_buffer_ref" | "gpu_buffer_slice" |
    "cpu_buffer_ref" }

ffi_parameterized_ref = { ffi_parameterized_ref_name ~ "<" ~ ffi_type ~ ">" }
ffi_parameterized_type = !{ "array" ~ ffi_array_parameters | ffi_parameterized_ref | "tuple" ~ ffi_tuple_parameters }
ffi_type = { ffi_type_base | ffi_parameterized_type }
ffi_type_sep = ${ ffi_type ~ sep }

//   special names

typ = { ffi_type | name }
typ_sep = ${ typ ~ sep }
type_hole = { typ | hole }
// using `?` rather than `hole` for ease of matching
place = @{ "local" | "cpu" | "gpu" }
place_hole = { place | hole }
stage = @{ "unbound" | "bound" | "encoded" | "submitted" | "ready" | "dead" }
stage_hole = { stage | hole }
quotient = { "node" | "input" | "output" | "halt" }
flow = { "none" | "have" | "met" | "need" }
tag_none = @{ none | none ~ "-" ~ none }
tag = !{ quotient ~ "(" ~ meta_remote ~ ")-" ~ flow | tag_none }

// Program

version_keyword = @{ "version" ~ sep }
version = ${ version_keyword ~ n ~ "." ~ n ~ "." ~ n }

declaration = { type_decl | external_function | funclet | function_class | pipeline }

// Types
ffi_type_decl = ${ "type" ~ sep ~ ffi_type }

name_type_separator = !{ name ~ ":" ~ "" }
native_value_decl = ${ "native_value" ~ sep ~ name_type_separator ~ typ }
slot_decl = ${ "slot" ~ sep ~ name_type_separator ~ typ ~ "-" ~ stage ~ "-" ~ place }
fence_decl = ${ "fence" ~ sep ~ name_type_separator ~ place }
buffer_alignment_decl = !{ name ~ ":" ~ place ~ "<"
    ~ "alignment_bits" ~ "=" ~ n ~ "," ~ "byte_size" ~ "=" ~ n ~ ">" }

buffer_decl = ${ "buffer" ~ sep ~ buffer_alignment_decl}
event_decl = ${ "event" ~ sep ~ name_type_separator ~ place }
scheduling_join_decl = ${ "scheduling_join" ~ sep ~ name }
buffer_space_decl = ${ "buffer_space" ~ sep ~ name }

type_decl = { (ffi_type_decl | native_value_decl | slot_decl | fence_decl | buffer_alignment_decl
    | buffer_decl | event_decl | scheduling_join_decl | buffer_space_decl) ~ ";" }

// Funclets

//   helpers

name_elements = !{ (name ~ ("," ~ name)*)? }
name_list = !{ "[" ~ name_elements ~ "]" | name }
remote_elements = !{ (remote ~ ("," ~ remote)*)? }
remote_list = !{ "[" ~ remote_elements ~ "]" | remote }

name_hole_elements = !{ (name_hole ~ ("," ~ name_hole)*)? }
name_box = !{ "[" ~ name_hole_elements ~ "]" | hole }
name_box_single = { name_box | name_hole }
name_call = !{ ("(" ~ name_hole_elements ~ ")" | hole ) }

impl_box = { "[" ~ impl_sep ~ default_keyword? ~ function_class_name ~ "]" }

//   external

external_group = { "group" ~ ":" ~ n }
external_binding = { "binding" ~ ":" ~ n }
external_input = { "input" ~ ":" ~ name }
external_output = { "output" ~ ":" ~ name }
// gonna make order matter for parser simplicity
external_resource = { "resource" ~ "{" ~ external_group ~ "," ~ external_binding
     ~ ("," ~ external_input)?  ~ ("," ~ external_output)? ~ "}" } // todo: cleanup

external_path = { "path" ~ ":" ~ str }
external_entry_point = { "entry" ~ ":" ~ str }
// gonna make order matter for parser simplicity
external_body = { ";" | "{" ~ external_path ~ "," ~ external_entry_point
    ~ ("," ~ external_resource)* ~ ","? ~ "}" }
external_arg = { (name ~ ":")? ~ ffi_type }
external_args = { (external_arg ~ ("," ~ external_arg)*)? }
external_loc = ${ "external-" ~ place ~ ("-" ~ pure_keyword )? }
external_ret = { "[" ~ external_args ~ "]" | ffi_type }
external_function = { external_loc ~ impl_box ~ name
    ~ "(" ~ external_args ~ ")" ~ "->" ~ external_ret ~ external_body }

//   value functions
function_class_sep = @{ "function" ~ sep }
function_class_args = { (typ ~ ("," ~ typ)*)? }
function_class_ret = { ("[" ~ function_class_args ~ "]") | typ }
function_class = { function_class_sep ~ function_class_name ~ "("
    ~ function_class_args ~ ")" ~ "->" ~ function_class_ret ~ ";" }

//   funclet

value_sep = @{ "value" ~ sep }
timeline_sep = @{ "timeline" ~ sep }
spatial_sep = @{ "spatial" ~ sep }

schedule_box_value = { value_sep ~ meta_name ~ "=" ~ name }
schedule_box_timeline = { ("," ~ timeline_sep ~ meta_name ~ "=" ~ name)? }
schedule_box_spatial = { ("," ~ spatial_sep ~ meta_name ~ "=" ~ name)? }
schedule_box = { "[" ~ schedule_box_value ~ schedule_box_timeline ~ schedule_box_spatial ~ "]" }

funclet = { "value" ~ impl_box ~ value_funclet | "schedule" ~ schedule_box ~ schedule_funclet |
    timeline_sep ~ timeline_funclet | spatial_sep ~ spatial_funclet }

//   header setup

funclet_arg = { (name ~ ":")? ~ typ }
funclet_args = { (funclet_arg ~ ("," ~ funclet_arg)*)? }
funclet_return = { "[" ~ funclet_args ~ "]" | typ }
funclet_header = { name ~ "(" ~ funclet_args ~ ")" ~ "->" ~ funclet_return }

value_command = { value_node | tail_edge }
value_funclet = { funclet_header ~ "{" ~ (value_command ~ ";")* ~ "}" }

timeline_command = { timeline_node | tail_edge }
timeline_funclet = { funclet_header ~ "{" ~ (timeline_command ~ ";")* ~ "}" }

spatial_command = { spatial_node | tail_edge }
spatial_funclet = { funclet_header ~ "{" ~ (spatial_command ~ ";")* ~ "}" }

schedule_typ = ${ (tag ~ sep)* ~ typ }
schedule_arg = { (name ~ ":")? ~ schedule_typ }
schedule_args = { (schedule_arg ~ ("," ~ schedule_arg)*)? }
schedule_return = { "[" ~ schedule_args ~ "]" | schedule_typ }
schedule_header = { name ~ "<" ~ tag ~ "," ~ tag ~ ">" ~ "(" ~ schedule_args ~ ")" ~ "->" ~ schedule_return }

schedule_command = { name ~ "=" ~ schedule_node | tail_edge | node_hole }
schedule_funclet = { schedule_header ~ "{" ~ (schedule_command ~ ";")* ~ "}" }

//   tail edges

triple_box = { "[" ~ value_sep ~ tag ~ "," ~ timeline_sep ~ tag ~ "," ~ spatial_sep ~ tag ~ "]" }

debug_hole_node = @{ "debug_hole" ~ sep ~ name_box_single }
return_sep = @{ "return" ~ sep }
return_node = { return_sep ~ name_box_single }
jump_sep = @{ "jump" ~ sep }
jump_node = { jump_sep ~ name_hole ~ name_box_single }

schedule_call_sep = @{ "schedule-call" ~ sep }
schedule_call_node = { schedule_call_sep ~ name_hole ~ triple_box ~ name_call ~ name_hole }
schedule_select_sep = @{ "schedule-select" ~ sep }
schedule_select_node = { schedule_select_sep ~ name_hole ~ name_hole ~ triple_box ~ name_call ~ name_hole }
schedule_yield_sep = @{ "schedule-call-yield" ~ sep }
schedule_yield_node = { schedule_select_sep ~ name_hole ~ triple_box ~ name_call ~ name_hole }

tail_edge = { return_node | jump_node | debug_hole_node |
    schedule_call_node | schedule_select_node | schedule_yield_node }

//    commands

//     value

// we can syntactically disallow holes to a (limited) extent here, so might as well
constant_node = ${ "constant" ~ sep ~ n ~ ffi_type }
extract_sep = @{ "extract" ~ sep }
extract_node = { extract_sep ~ name ~ n }
call_sep = @{ "call" ~ sep }
call_node = { call_sep ~ function_class_name ~ name_call }
select_sep = @{ "select" ~ sep }
select_node = { select_sep ~ name_sep ~ name_sep ~ name }

//     scheduling

alloc_temporary_node = ${ "alloc-temporary-" ~ place_hole ~ "-" ~ type_hole ~ sep ~ remote_hole }
unbound_slot_node = ${ "unbound-slot-" ~ place_hole ~ "-" ~ type_hole ~ sep ~ remote_hole }
drop_node = ${ "drop" ~ sep ~ name_hole }
alloc_sep = ${"alloc" ~ sep}
alloc_node = { alloc_sep ~ place_hole ~ type_hole ~ name_hole ~ remote_hole }
encode_do_sep = ${ "encode-do" ~ sep }
encode_do_call = { (remote_hole ~ name_call) | hole }
encode_do_ret = { name_box | name } // node_box captures "?"
encode_do_node = { encode_do_sep ~ place_hole ~ encode_do_call ~ "->" ~ encode_do_ret }
encode_copy_sep = ${ "encode-copy" }
encode_copy_node = { encode_copy_sep ~ name_hole_sep ~ name_hole }
submit_node = ${ "submit-" ~ place_hole ~ sep ~ remote_hole }
encode_fence_node = ${ "encode-fence-" ~ place_hole ~ sep ~ remote_hole }
sync_fence_sep = ${ "sync-fence-" ~ place_hole ~ sep }
sync_fence_node = { sync_fence_sep ~ name_hole_sep ~ remote_hole }
inline_join_sep = @{ "inline-join" ~ sep }
inline_join_node = { inline_join_sep ~ name_hole ~ name_box ~ name_hole }
serialized_join_sep = @{ "serialized-join" ~ sep }
serialized_join_node = { serialized_join_sep ~ name_hole ~ name_box ~ name_hole }
default_join_node = { "default-join" }

//     timeline

submission_node = ${ "submission-" ~ place ~ "->" ~ place ~ sep ~ name }
synchronization_sep = ${ "sync-" ~ place ~ "->" ~ place ~ sep }
synchronization_node = { synchronization_sep ~ name_sep ~ name }

//    spatial

separated_linear_space_node = ${ "separated-linear-space-" ~ place ~ sep ~ name }
merged_linear_space_node = ${ "merged-linear-space-" ~ place ~ sep ~ name_box }

//   nodes

value_node = { constant_node | extract_node | call_node | select_node }

schedule_node = { alloc_temporary_node | unbound_slot_node | encode_do_node |
    drop_node | alloc_node | encode_copy_node | submit_node | encode_fence_node  |
    sync_fence_node | inline_join_node | serialized_join_node | default_join_node }

timeline_node = { synchronization_node | submission_node }

spatial_node = { separated_linear_space_node | merged_linear_space_node }

// Pipelines

pipeline_sep = @{ "pipeline" ~ sep }
pipeline = { pipeline_sep ~ str ~ "=" ~ name ~ ";" }

program = { SOI ~ version ~ declaration* ~ EOI }