#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(s: BufferSpace) -> BufferSpace { returns s }

val main() -> i64 {
    c :- 1
    a :- 2
    h, g :- id(a, c)
    r :- h + g
    returns r
}

val id(a: i64, c: i64) -> (i64, i64) {
    returns (a, c)
}

fn main_func() -> i64 @ node(val.r)-usable impls main, time, space  {
    let c: i64 @ node(val.c)-usable = 1;
    let a: i64 @ node(val.a)-usable = 2;
    let h: i64 @ node(val.h), g: i64 @ node(val.g) = id_func(a, c) @ node(val.(h, g));
    let r: i64 @ node(val.r) = h + g;
    r
}

fn id_func(a: i64 @ input(val.a)-usable, c: i64 @ input(val.c)-usable) 
    -> (i64 @ output(val.a)-usable, i64 @ output(val.c)-usable) 
    impls id, time, space
{
    (a, c)
}

pipeline main { main_func }