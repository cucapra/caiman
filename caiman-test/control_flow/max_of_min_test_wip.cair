// equivalent code (the goal is to use x twice in the final):
// max(x : i64, y : i64) -> i64 {
//     if x < y {
//         y
//     } else {
//         x
//     }
// }
//
// min(x : i64, y : i64) -> i64 {
//     if x < y {
//         x
//     } else {
//         y
//     }
// }
//
// max_of_min(x : i64, y : i64, z : i64) -> i64 {
//     max(min(x, y), min(x, z)) 
// }

// THIS TEST IS CURRENTLY NOT TYPECHECKING

version 0.0.2

type i64;
ref %i64l : i64-local<flags=[]>;
event %event0;
buffer_space %buffspace;
native_value %i64n : i64;

function @max(i64, i64) -> i64;
function @min(i64, i64) -> i64;
function @max_q(i64, i64, i64, i64) -> i64;
function @lt(i64, i64) -> i64;

external-cpu-pure[impl @lt] %lt(i64, i64) -> i64;

value[impl default @max] %max(%x : i64, %y : i64) -> [%out: i64] {
    %b_t = call @lt(%x, %y);
    %b = extract %b_t 0;
    %r = select %b %y %x;
    return %r;
}

value[impl default @min] %min(%x : i64, %y : i64) -> [%out: i64] {
    %b_t = call @lt(%x, %y);
    %b = extract %b_t 0;
    %r = select %b %x %y;
    return %r;
}

value[impl default @max_q] %max_q(%x : i64, %y : i64, %z : i64, %w : i64) -> i64 {
    %left_t = call @max(%x, %y);
    %left = extract %left_t 0;
    %right_t = call @max(%z, %w);
    %right = extract %right_t 0;

    %result_t = call @max(%left_t, %right_t);
    %result = extract %result 0;

    return %result;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

// max setup

schedule[value $val = %max, timeline $time = %time, spatial $space = %space]
%max_main<$time-usable, $time-usable>
(%x     : $val.%x-usable $time-usable $space-usable %i64n,
 %y     : $val.%y-usable $time-usable $space-usable %i64n) 
->
$val.%out-usable $time-usable $space-usable %i64n 
{
    %b_loc = alloc-temporary local [] i64;
    local-do-external %lt $val.%b_t(%x, %y) -> %b_loc;
    %b = read-ref i64 %b_loc;

    %djoin = default-join;
    %join = inline-join %max_ret [] %djoin;

    schedule-select %b [%max_left, %max_right]
        [$val.%r, $time, $space]
        (%x, %y) %join;
}

// max branches

schedule[value $val = %max, timeline $time = %time, spatial $space = %space]
%max_left<$time-usable, $time-usable>
(%x     : $val.%x-usable $time-usable $space-usable %i64n,
 %y     : $val.%y-usable $time-usable $space-usable %i64n)
->
$val.%y-usable $time-usable $space-saved %i64n
{
    return %y;
}

schedule[value $val = %max, timeline $time = %time, spatial $space = %space]
%max_right<$time-usable, $time-usable>
(%x     : $val.%x-usable $time-usable $space-usable %i64n,
 %y     : $val.%y-usable $time-usable $space-usable %i64n)
->
$val.%x-usable $time-usable $space-saved %i64n
{
    return %x;
}

// max return

schedule[value $val = %max, timeline $time = %time, spatial $space = %space]
%max_ret<$time-usable, $time-usable>
(%r : $val.%r-usable $time-usable $space-saved %i64n)
->
$val.%out-usable $time-usable $space-usable %i64n
{
    return %r;
}

// min setup

schedule[value $val = %min, timeline $time = %time, spatial $space = %space]
%min_main<$time-usable, $time-usable>
(%x     : $val.%x-usable $time-usable $space-usable %i64n,
 %y     : $val.%y-usable $time-usable $space-usable %i64n) 
->
$val.%r-usable $time-usable $space-usable %i64n 
{
    %b_loc = alloc-temporary local [] i64;
    local-do-external %lt $val.%b_t(%x, %y) -> %b_loc;
    %b = read-ref i64 %b_loc;

    %r_loc = alloc-temporary local [] i64;

    %djoin = default-join;
    %join = inline-join %max_ret [] %djoin;

    schedule-select %b [%max_left, %max_right]
        [$val.%r, $time, $space]
        (%x, %y) %join;
}

// min branches

schedule[value $val = %min, timeline $time = %time, spatial $space = %space]
%min_left<$time-usable, $time-usable>
(%x     : $val.%x-usable $time-usable $space-usable %i64n,
 %y     : $val.%y-usable $time-usable $space-usable %i64n)
->
$val.%x-usable $time-usable $space-saved %i64n
{
    return %x;
}

schedule[value $val = %min, timeline $time = %time, spatial $space = %space]
%min_right<$time-usable, $time-usable>
(%x     : $val.%x-usable $time-usable $space-usable %i64n,
 %y     : $val.%y-usable $time-usable $space-usable %i64n)
->
$val.%y-usable $time-usable $space-saved %i64n
{
    return %y;
}

// min return

schedule[value $val = %min, timeline $time = %time, spatial $space = %space]
%min_ret<$time-usable, $time-usable>
(%r : $val.%r-usable $time-usable $space-saved %i64n)
->
$val.%r-usable $time-usable $space-usable %i64n
{
    return %r;
}

pipeline "main" = %max_main;