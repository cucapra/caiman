#version 0.1.0
tmln time(e: Event) -> Event { returns e }
sptl space(s: BufferSpace) -> BufferSpace { returns s }


feq rec_sum {
    extern(cpu) pure rec_sum_cpu(i32, i32) -> i32

    extern(gpu) rec_sum_gpu(x: i32, y: i32) -> out: i32 {
        path : "rec_sum_gpu.comp",
        entry : "main",
        dimensions : 3,
        resource {
            group : 0,
            binding : 0,
            input : x
        },
        resource {
            group : 0,
            binding : 1,
            input : y
        },
        resource {
            group : 0,
            binding : 2,
            output : out
        }
    }

    val rec_sum(a: i32, b: i32) -> i32 {
        returns 0 if a > b else 
                a if a == b else
                rec_sum'<_dim0, _dim1, _dim2>(a + 1, b) + a
    }
}

fn rec_sum_local(a: i32, b: i32) -> i32 impls rec_sum, time, space {
    if a > b {
        0
    } else if a == b {
        a
    } else {
        rec_sum_local'<_dim0, _dim1, _dim2>(a + 1, b) + a
    }
}

val select_sum(a: i32, b: i32, c: i32) -> i32 {
    x :- rec_sum'<1, 1, 1>(a, b)
    returns rec_sum'<1, 1, 1>(b, c) if x < 0 else x
}

fn select_sum_local(a: i32, b: i32, c: i32) -> i32 impls select_sum, time, space {
    let b2 = b;
    let x = rec_sum_local'<1, 1, 1>(a, b2);
    if x < 0 {
        rec_sum_local'<1, 1, 1>(b, c)
    } else {
        x
    }
}

tmln double_sync(e: Event) -> out: Event {
    loc1, rem1 :- encode_event(e)
    sub :- submit_event(rem1)
    loc2, rem2 :- encode_event(loc1, sub)
    sub2 :- submit_event(rem2)
    f1 :- sync_event(loc2, sub)
    f2 :- sync_event(f1, sub2)
    returns f2
}

fn select_sum_gpu(a: i32, b: i32, c: i32) -> i32 
    impls select_sum, double_sync, space 
{
    var a = a;
    var b = b;
    var c = c;
    let e = encode-begin gpu;
    encode e.copy[a_gpu <- &a];
    encode e.copy[b_gpu <- &b];
    encode e.call[x_gpu <- rec_sum_gpu'<1, 1, 1>(a_gpu, b_gpu)];
    let f1 = submit e;
    let e2 = encode-begin gpu;
    encode e2.copy[b_gpu <- &b];
    encode e2.copy[c_gpu <- &c];
    encode e2.call[r_gpu <- rec_sum_gpu'<1, 1, 1>(b_gpu, c_gpu)];
    let f2 = submit e2;
    let x = (await f1).x_gpu;
    let r = (await f2).r_gpu;

    if x < 0 {
        r
    } else {
        x
    }
}

pipeline main { select_sum_gpu }