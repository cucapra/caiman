// we want this second read test to make sure we're not "getting lucky"
// specifically we mix up the operation order while fixing the other orders

// 
// implements:
// main() -> (i32, i64) {
//   return (4, 5)
// } 
// 

version 0.0.2

ffi i64;
ffi i32;
event %event0;
buffer_space %buffspace;
native_value %i64 : i64;
native_value %i32 : i32;

function @main() -> %i64;

value[impl default @main] %value() -> [%i32, %i64] {
    %x = constant %i32 4;
    %y = constant %i64 5;
    return [%x, %y];
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %value, timeline $time = %time, spatial $space = %space]
%foo<$time-usable, $time-usable>() ->
[%out1 : $val.%x-usable $time-usable $space-usable %i32,
 %out2 : $val.%y-usable $time-usable $space-usable %i64] {
    %_ = alloc-temporary local [] i64;
    %_ = alloc-temporary local [] i32;

    local-do-builtin $val.%y() -> ?;
    local-do-builtin $val.%x() -> ?;

    %a = read-ref ? ?;
    %b = read-ref ? ?;

    return [%a, %b];
}

pipeline "main" = %foo;