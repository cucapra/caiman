(
	version : (0, 0, 1),
	program : (
		types : {
			0 : I32,
			1 : Slot(value_type : 0, queue_stage : Ready, queue_place : Local ),
			/*1 : Slot(value_type : 0, value_tag : None, queue_stage : Ready, queue_place : Local, fence_id : 0 ),
			2 : Slot(value_type : 0, value_tag : ConcreteInput(funclet_id : 9, index : 0), queue_stage : Ready, queue_place : Local, fence_id : 0 ),
			3 : Slot(value_type : 0, value_tag : ConcreteOutput(funclet_id : 9, index : 0), queue_stage : Ready, queue_place : Local, fence_id : 0 ),
			4 : Slot(value_type : 0, value_tag : ConcreteInput(funclet_id : 10, index : 0), queue_stage : Ready, queue_place : Local, fence_id : 0 ),
			5 : Slot(value_type : 0, value_tag : ConcreteOutput(funclet_id : 10, index : 0), queue_stage : Ready, queue_place : Local, fence_id : 0 ),
			6 : Slot(value_type : 0, value_tag : Operation(remote_node_id : (funclet_id : 10, node_id : 2)), queue_stage : Ready, queue_place : Local, fence_id : 0 ),*/
		},
		funclets : {
			0 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalCpu(external_function_id : 0, arguments : [0]),
					ExtractResult(node_id : 2, index : 0),
					CallExternalGpuCompute(external_function_id : 0, arguments : [3], dimensions : [1, 1, 1]),
					ExtractResult(node_id : 4, index : 0)
				],
				tail_edge : Return(return_values : [5])
			),
			/*1 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalGpuCompute(external_function_id : 0, arguments : [0], dimensions : [1, 1, 1]),
					ExtractResult(node_id : 2, index : 0),
					CallExternalGpuCompute(external_function_id : 0, arguments : [3], dimensions : [1, 1, 1]),
					ExtractResult(node_id : 4, index : 0)
				],
				tail_edge : Return(return_values : [5])
			),
			2 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					CallExternalCpu(external_function_id : 0, arguments : [0]),
					ExtractResult(node_id : 1, index : 0),
				],
				tail_edge : Return(return_values : [2])
			),
			3 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalGpuCompute(external_function_id : 0, arguments : [0], dimensions : [1, 1, 1]),
					ExtractResult(node_id : 2, index : 0),
					CallExternalCpu(external_function_id : 0, arguments : [3]),
					ExtractResult(node_id : 4, index : 0)
				],
				tail_edge : Return(return_values : [5])
			),
			4 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalCpu(external_function_id : 0, arguments : [0]),
					ExtractResult(node_id : 2, index : 0),
					CallExternalCpu(external_function_id : 0, arguments : [3]),
					ExtractResult(node_id : 4, index : 0)
				],
				tail_edge : Return(return_values : [5])
			),
			5 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalGpuCompute(external_function_id : 0, arguments : [0], dimensions : [1, 1, 1]),
					ExtractResult(node_id : 2, index : 0),
				],
				tail_edge : Return(return_values : [3])
			),
			6 : (
				kind : Value,
				input_types : [0],
				output_types : [0, 0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalGpuCompute(external_function_id : 0, arguments : [0], dimensions : [1, 1, 1]),
					ExtractResult(node_id : 2, index : 0),
				],
				tail_edge : Yield(funclet_ids : [7, 8], captured_arguments : [3], return_values : [3])
			),
			7 : (
				kind : Value,
				input_types : [0, 0],
				output_types : [0, 0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalGpuCompute(external_function_id : 0, arguments : [0], dimensions : [1, 1, 1]),
					ExtractResult(node_id : 2, index : 0),
					Phi(index : 1),
				],
				tail_edge : Yield(funclet_ids : [7, 8], captured_arguments : [3], return_values : [4])
			),
			8 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
				],
				tail_edge : Return(return_values : [0])
			),*/
			9 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalGpuCompute(external_function_id : 0, arguments : [0], dimensions : [1, 1, 1]),
					ExtractResult(node_id : 2, index : 0),
				],
				tail_edge : Return(return_values : [3])
			),
			10 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					CallValueFunction(function_id : 0, arguments : [0]),
					ExtractResult(node_id : 1, index : 0),
				],
				tail_edge : Return(return_values : [2])
			),

			11 : (
				kind : ScheduleExplicit,
				input_types : [1],
				output_types : [1],

				nodes : [
					Phi(index : 0),
					AllocTemporary(place : Local, type_id : 0, operation : (funclet_id : 0, node_id : 1)),
					EncodeDo(place : Local, operation : (funclet_id : 0, node_id : 1), inputs : [], outputs : [1]),
					AllocTemporary(place : Local, type_id : 0, operation : (funclet_id : 0, node_id : 2)),
					EncodeDo(place : Local, operation : (funclet_id : 0, node_id : 2), inputs : [1], outputs : [3]),
					AllocTemporary(place : Gpu, type_id : 0, operation : (funclet_id : 0, node_id : 2)),
					EncodeCopy(place : Gpu, input : 3, output : 5),
					AllocTemporary(place : Gpu, type_id : 0, operation : (funclet_id : 0, node_id : 4)),
					EncodeDo(place : Gpu, operation : (funclet_id : 0, node_id : 4), inputs : [1, 1, 1, 5], outputs : [7]),
					AllocTemporary(place : Local, type_id : 0, operation : (funclet_id : 0, node_id : 4)),
					Submit(place : Gpu),
					EncodeFence(place : Gpu),
					SyncFence(place : Local, fence : 11),
					EncodeCopy(place : Local, input : 7, output : 9),
				],
				tail_edge : Return(return_values : [9])
			),

			12 : (
				kind : ScheduleExplicit,
				input_types : [1],
				output_types : [1],

				nodes : [
					Phi(index : 0),
					AllocTemporary(place : Local, type_id : 0, operation : (funclet_id : 9, node_id : 1)),
					EncodeDo(place : Local, operation : (funclet_id : 9, node_id : 1), inputs : [], outputs : [1]),
					AllocTemporary(place : Gpu, type_id : 0, operation : (funclet_id : 9, node_id : 0)),
					EncodeCopy(place : Gpu, input : 0, output : 3),
					AllocTemporary(place : Gpu, type_id : 0, operation : (funclet_id : 9, node_id : 3)),
					EncodeDo(place : Gpu, operation : (funclet_id : 9, node_id : 2), inputs : [1, 1, 1, 3], outputs : [5]),
					AllocTemporary(place : Local, type_id : 0, operation : (funclet_id : 9, node_id : 3)),
					EncodeFence(place : Gpu),
					SyncFence(place : Local, fence : 8),
					EncodeCopy(place : Local, input : 5, output : 7),
				],
				tail_edge : Return(return_values : [7])
			),

			13 : (
				kind : ScheduleExplicit,
				input_types : [1],
				output_types : [1],

				nodes : [
					Phi(index : 0),
				],
				tail_edge : ScheduleCall(value_operation : (funclet_id : 10, node_id : 1), callee_funclet_id : 12, callee_arguments : [0], continuation_funclet_id : 14, continuation_arguments : [])
			),

			14 : (
				kind : ScheduleExplicit,
				input_types : [1],
				output_types : [1],

				nodes : [
					Phi(index : 0),
				],
				tail_edge : Return(return_values : [0])
			)
		},
		external_cpu_functions : [
			(name : "do_thing_on_cpu", input_types : [0], output_types : [0])
		],
		external_gpu_functions : [
			(
				name : "do_thing_on_gpu", input_types : [0], output_types : [0], entry_point : "main", resource_bindings : [(group : 0, binding : 0, input : Some(0), output : None), (group : 0, binding : 1, input : None, output : Some(0))],
				shader_module_content : Wgsl
				("
					struct Output {field_0 : i32;};
					fn do_thing_on_gpu(a : i32) -> Output 
					{
						var output : Output;
						output.field_0 = a + 1;
						return output;
					}
					
					struct Input_0 { field_0 : i32; };
					[[group(0), binding(0)]] var<storage, read> input_0 : Input_0;
					struct Output_0 { field_0 : i32; };
					[[group(0), binding(1)]] var<storage, read_write> output_0 : Output_0;
					[[stage(compute), workgroup_size(1, 1, 1)]] fn main()
					{
						let output = do_thing_on_gpu(input_0.field_0);
						output_0.field_0 = output.field_0;
					}
				")
			)
		],
		value_functions : {
			0 : (name : "test_value_function", input_types : [0], output_types : [0], default_funclet_id : Some(9))
		},
		scheduling_funclet_extras : {
			11 : (
				value_funclet_id : 0,
				input_slots : {0 : (value_tag : None)},
				output_slots : {0 : (value_tag : None)},
				fences : {
					0 : Fence(
						prior_fence_ids : [],
						place : Local)
				}
			),
			12 : (
				value_funclet_id : 9,
				input_slots : {0 : (value_tag : Input(funclet_id : 9, index : 0))},
				output_slots : {0 : (value_tag : Output(funclet_id : 9, index : 0))},
				fences : {
					0 : Fence(
						prior_fence_ids : [],
						place : Local)
				}
			),
			13 : (
				value_funclet_id : 10,
				input_slots : {0 : (value_tag : Input(funclet_id : 10, index : 0))},
				output_slots : {0 : (value_tag : Operation(remote_node_id : (funclet_id : 10, node_id : 0)) )},
				fences : {
					0 : Fence(
						prior_fence_ids : [],
						place : Local)
				}
			),
			14 : (
				value_funclet_id : 10,
				input_slots : {0 : (value_tag : Operation(remote_node_id : (funclet_id : 10, node_id : 2)) )},
				output_slots : {0 : (value_tag : Output(funclet_id : 10, index : 0))},
				fences : {
					0 : Fence(
						prior_fence_ids : [],
						place : Local)
				}
			)
		},
		pipelines : [
			(name : "pipeline_1", entry_funclet : 11), 
			/*(name : "pipeline_with_gpu_gpu_communication", entry_funclet : 1),
			(name : "pipeline_with_single_cpu_call", entry_funclet : 2),
			(name : "pipeline_with_gpu_cpu_communication", entry_funclet : 3),
			(name : "pipeline_with_cpu_cpu_communication", entry_funclet : 4),
			(name : "pipeline_with_single_gpu_call", entry_funclet : 5),
			(name : "pipeline_with_yield_enter_loop_exit", entry_funclet : 6),*/
			(name : "pipeline_with_value_function", entry_funclet : 13),
			]
	)
)