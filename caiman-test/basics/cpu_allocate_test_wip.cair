version 0.0.1

types [
    i64,
    native_value $native_i64 {
        type : i64
    },
    slot $slot_local {
        type : i64,
        stage : ready,
        place : local,
    },
    slot $slot_cpu {
        type : i64,
        stage : ready,
        place : cpu,
    },
    buffer $buffer_cpu {
        place : cpu,
        static_layout_opt : {
            alignment_bits : 0,
            byte_size : 4096
        },
    },
    event $event0 {
        place : local
    },
    space_buffer $buffer_space {},
]

external_cpu i64 @op(i64);

value i64 @foo(%i : i64) {
//    %x = constant 2i64;
    %y = call @op(%i);
    %z = extract %y 0;
    return %z;
}

timeline $event0 @time(%e : $event0) {
    %sub1 = submission-local->cpu %e;
    %sync1 = sync-local->cpu %sub1 %sub1;
    return %sync1;
}

schedule $slot_cpu @bar(%s : $slot_local, %buff : $buffer_cpu) {
//    %0 = alloc-temporary-local-i64 @foo.%x;
//    %1 = encode-do-local @foo.%x() -> %0;
    %2 = alloc-cpu-i64 %buff @foo.%i;
    %3 = encode-copy-cpu %s %2;
    %4 = alloc-cpu-i64 %buff @foo.%z;
    %5 = encode-do-cpu @foo.%y(%2) -> %4;
    %6 = submit-cpu @time.%sub1;
    %7 = encode-fence-cpu @time.%sub1;
    %8 = sync-fence-cpu %7 @time.%sync1;
    return %4;
}

spatial $buffer_space @space(%bs : $buffer_space) {
    return %bs;
}

extras {
    @bar {
        value : @foo,
        space : @space,
        time : @time,
        input_slots : {
            %s : slot_info(value_tag input @foo.%i)
        },
        output_slots : {
            %s : slot_info(value_tag output @foo.%i, spatial_tag output @space.%bs)
        },
        input_fences : {},
        output_fences : {},
        input_buffers : {%buff : buffer_info(spatial_tag input @space.%bs)},
        output_buffers : {},
        in_timeline_tag : timeline_tag input @time.%e,
        out_timeline_tag : timeline_tag output @time.%e,
    },
}

pipeline "main" = @bar;