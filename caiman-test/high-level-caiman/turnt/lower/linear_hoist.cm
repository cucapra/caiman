val value(a: i32) -> i32 {
    t :- a * 2
    x :- t + t
    z :- t + x
    y :- a if x > a else x
    returns y + z

}

tmln time(e: Event) -> Event {
    returns e
}

sptl space(b: BufferSpace) -> BufferSpace {
    returns b
}

fn main(a: i32) -> i32 impls value, time, space {
    var z;
    var x;
    ???;
    let y = if x > a {
        /* #CHECK-LABEL:
        name: FuncletId(
            "_main3",
        ),
        args: [...
            FuncletArgument {
                name: Some(
                    NodeId(
                        "_z%0_ref",
                    ),
                ),
                typ: TypeId(
                    "&i32",
                ),
                tags: [
                    Tag {
                        quot: Filled(
                            RemoteNodeId {
                                funclet: MetaId(
                                    "val",
                                ),
                                node: Some(
                                    Filled(
                                        NodeId(
                                            "z",
                                        ),
                                    ),
                                ),
                            },
                        ),
                        flow: Filled(
                            Usable,
                        ),
                    },

        #END */
        a
    } else {
        x
    };
    /* #CHECK-LABEL:
    name: FuncletId(
        "_main2",
    ),
    args: [...
        FuncletArgument {
            name: Some(
                NodeId(
                    "_z%0_ref",
                ),
            ),
            typ: TypeId(
                "&i32",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "z",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
    #END */
    ???;
    y + z
}