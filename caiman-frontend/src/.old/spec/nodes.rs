// This file was auto-generated by the build script!

use caiman::ir;
use super::input;

#[derive(Debug, Clone)]
pub enum FunctionalExprNodeKind {
    Phi,
    ExtractResult,
    Constant,
    CallFunctionClass,
    Select,
}

impl FunctionalExprNodeKind {
    pub fn to_ir(&self, mut v: Vec<input::SpecNodeInput>) -> ir::Node {
        use FunctionalExprNodeKind::*;        match self {
            Phi => ir::Node::Phi {index: std::mem::take(&mut v[0]).unwrap_usize(), },
            ExtractResult => ir::Node::ExtractResult {node_id: std::mem::take(&mut v[0]).unwrap_usize(), index: std::mem::take(&mut v[1]).unwrap_usize(), },
            Constant => ir::Node::Constant {value: std::mem::take(&mut v[0]).unwrap_irconstant(), type_id: std::mem::take(&mut v[1]).unwrap_usize(), },
            CallFunctionClass => ir::Node::CallFunctionClass {function_id: std::mem::take(&mut v[0]).unwrap_usize(), arguments: std::mem::take(&mut v[1]).unwrap_usize_slice(), },
            Select => ir::Node::Select {condition: std::mem::take(&mut v[0]).unwrap_usize(), true_case: std::mem::take(&mut v[1]).unwrap_usize(), false_case: std::mem::take(&mut v[2]).unwrap_usize(), },
        }
    }

}

