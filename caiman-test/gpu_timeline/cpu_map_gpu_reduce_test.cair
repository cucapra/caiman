version 0.0.2

// Performs two operations on the CPU
// If the input is 1, we merge the two operations, otherwise
// we merge the first operation with itself. The merging 
// happens on the GPU.

// This test encodes different things in the two branches
// and synchronizes in the join point.

// In psuedocode:
// fn foo(c: i32) -> i32 {
//     let a = baz();
//     let b = bar();
//     if c {
//         encode merge(a, b)
//     } else {
//         encode merge(a, a)
//     }
//     sync fence
//     return result-from-gpu
// }

ffi i32;
native_value %i32 : i32;
ref %i32l : i32-local<flags=[map_read, map_write, copy_src, copy_dst, storage]>;
ref %i32gs : i32-gpu<flags=[copy_dst, storage]>;
ref %i32gd : i32-gpu<flags=[map_read, storage]>;
event %event0;
encoder %encoder0 : gpu;
buffer_space %buff_space;

function @merge(%i32, %i32) -> %i32;
function @foo(%i32) -> %i32;
function @baz() -> %i32;
function @bar() -> %i32;


external-cpu-pure[impl @baz] %baz() -> i32;
external-cpu-pure[impl @bar] %bar() -> i32;

external-gpu[impl @merge] %gpu_merge(%x : i32, %y: i32) -> [%out : i32]
{
    path : "gpu_merge.comp",
    entry : "main",
    dimensionality : 3,
    resource {
        group : 0,
        binding : 0,
        input : %x
    },
    resource {
        group : 0,
        binding : 1,
        input : %y
    },
    resource {
        group : 0,
        binding : 2,
        output : %out
    }
}

value[impl @foo] %foo(%c: %i32) -> [%out: %i32] {
    %s = constant %i32 1;
    %a_t = call @baz();
    %a = extract %a_t 0;
    %b_t = call @bar();
    %b = extract %b_t 0;

    %snd = select %c %b %a;

    %r_t = call @merge(%s, %s, %s, %a, %snd);
    %r = extract %r_t 0;
    return %r;
}

timeline %foo_time(%e : %event0) -> [%out: %event0] {
    %enc = encoding-event %e [];
    %loc1 = extract %enc 0;
    %rem1 = extract %enc 1;
    %sub = submission-event %rem1;
    %snc = synchronization-event %loc1 %sub;
    return %snc;
}

spatial %foo_space(%bs : %buff_space) -> %buff_space {
    return %bs;
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_main<$time.%e-usable, $time.%out-usable>
(%c: $val.%c-usable %i32) -> [%out : $val.%out-usable %i32] {
    %a_ref = alloc-temporary local [map_read, map_write, copy_src, copy_dst, storage] i32;
    %b_ref = alloc-temporary local [map_read, map_write, copy_src, copy_dst, storage] i32;

    local-do-external %baz $val.%a_t() -> %a_ref;
    local-do-external %bar $val.%b_t() -> %b_ref;


    %default = default-join;
    %join = inline-join %foo_merge [] %default;
    schedule-select %c [%foo_left, %foo_right] 
            [$val.%snd, $time, $space] (%a_ref, %b_ref) %join;   
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_left<phi-$time.%e-usable, $time.%loc1-usable>
    (%a: $val.%a-usable phi-$time.%e-usable $space-saved %i32l, 
    %b: $val.%b-usable phi-$time.%e-usable $space-saved %i32l) -> 
    [%enc_out : $time.%rem1-usable %encoder0,
    %x_out : $val.%a-usable $space-saved $time.%rem1-usable %i32gs,
    %snd_out : $val.%b-usable $space-saved $time.%rem1-usable %i32gs,
    %z_out : $val-dead $space-saved $time.%rem1-usable %i32gd] 
{
    %x_gpu = alloc-temporary gpu [storage, copy_dst] i32;
    %y_gpu = alloc-temporary gpu [storage, copy_dst] i32;
    %z_gpu = alloc-temporary gpu [storage, map_read] i32;


    %enc = begin-encoding gpu $time.%enc [%x_gpu, %y_gpu, %z_gpu] [];
    encode-copy %enc %a -> %x_gpu;
    encode-copy %enc %b -> %y_gpu;

    return [%enc, %x_gpu, %y_gpu, %z_gpu];
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_right<phi-$time.%e-usable, $time.%loc1-usable>
    (%a: $val.%a-usable phi-$time.%e-usable $space-saved %i32l, 
    %b: $val.%b-usable phi-$time.%e-usable $space-saved %i32l) -> 
    [%enc_out : $time.%rem1-usable %encoder0,
    %x_out : $val.%a-usable $space-saved $time.%rem1-usable %i32gs,
    %snd_out : $val.%a-usable $space-saved $time.%rem1-usable %i32gs,
    %z_out : $val-dead $space-saved $time.%rem1-usable %i32gd] 
{
    %x_gpu = alloc-temporary gpu [storage, copy_dst] i32;
    %y_gpu = alloc-temporary gpu [storage, copy_dst] i32;
    %z_gpu = alloc-temporary gpu [storage, map_read] i32;


    %enc = begin-encoding gpu $time.%enc [%x_gpu, %y_gpu, %z_gpu] [];
    encode-copy %enc %a -> %x_gpu;
    encode-copy %enc %a -> %y_gpu;

    return [%enc, %x_gpu, %y_gpu, %z_gpu];
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_merge<$time.%loc1-usable, $time.%out-usable>
    (%enc: $time.%rem1-usable %encoder0,
    %x_gpu: $val.%a-usable $space-saved $time.%rem1-usable %i32gs,
    %snd_gpu: $val.%snd-usable $space-saved $time.%rem1-usable %i32gs,
    %z_gpu : $val-dead $space-saved $time.%rem1-usable %i32gd) -> 
    [%out : $val.%r-usable %i32] 
{
    %c_loc = alloc-temporary local [map_read, map_write, copy_src, copy_dst, storage] i32;
    local-do-builtin $val.%s() -> %c_loc;
    %c = read-ref i32 %c_loc;
    encode-do %enc %gpu_merge $val.%r_t(%c, %c, %c, %x_gpu, %snd_gpu) -> %z_gpu;
    %f = submit %enc $time.%sub;
    sync-fence %f $time.%snc;

    %z_loc = alloc-temporary local [map_read, map_write, copy_src, copy_dst, storage] i32;
    local-copy %z_gpu -> %z_loc;
    %z = read-ref i32 %z_loc;
    return %z;
}

pipeline "main" = %foo_main;