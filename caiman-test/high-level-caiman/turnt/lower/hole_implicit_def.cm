tmln time(e: Event) -> Event { returns e }
sptl space(s: BufferSpace) -> BufferSpace { returns s }

val bar(x: i64) -> i64 {
    returns x + 10
}

val foo() -> i64 {
    x :- 10 * 10 + 20
    y :- 1 if x < 10 else 0
    returns x + y
}

fn bar_impl(x: i64) -> i64 impls bar, time, space {
    ???
}

fn foo_impl() -> i64 impls foo, time, space {
    ???;
    let y: i64 = if x < 10 { ??? } else { ??? };
    /* #CHECK:
    header: FuncletHeader {
    name: FuncletId(
        "_foo_impl2",
    ),
    args: [...
        FuncletArgument {
            name: Some(
                NodeId(
                    "x%",
                ),
            ),
            typ: TypeId(
                "i64",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "x",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "sptl",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
            ],
        },
    ],
    #END */
    ???
}