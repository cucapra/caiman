version 0.0.1

types [
    f32,f64,u8,u16,u32,u64,usize,i8,i16,i32,i64,array<i32, 2>,erased_length_array<u32>,
//    struct, ???
    tuple<f32, u8>,const_ref<u64>,mut_ref<const_ref<u64>>,const_slice<array<u32, 1>>,mut_slice<i32>,
    gpu_buffer_ref<i32>,gpu_buffer_slice<i32>,gpu_buffer_allocator,
    slot $slot0 {
        type : i32,
        stage : ready,
        place : local,
    },
    event $event0 {
        place : local
    },
]

external_cpu i32 @do_thing_on_cpu(i32);
external_gpu i32 @do_thing_on_gpu(i32) {
    resource {
        group : 0,
        binding : 0,
        input : i32,
    },
    resource {
        group : 0,
        binding : 1,
        output : i32,
    }
}

value i32 @foo(i32) {
    // other commands
    %0 = phi 0;
    %1 = constant 4i32;
    return %0;
}

schedule $slot0 @bar($slot0) {
    %0 = phi 0;
    %x = alloc-local-i32 @foo.%1;
    %x <- do-local @foo.%1();
    return %x;
}

timeline $event0 @time($event0) {
    %0 = phi 0;
    return %0;
}

value_function i32 @value1(i32) : @foo;

extras {
    @bar {
        value : @foo,
        input_slots : {
            %0 : slot_info(value_tag input @foo.%0)
        },
        output_slots : {
            %0 : slot_info()
        },
        input_fences : {},
        output_fences : {},
        input_buffers : {},
        output_buffers : {},
        in_timeline_tag : timeline_tag input @time.%0,
        out_timeline_tag : timeline_tag input @time.%0,
    },
}

pipeline "example" = @bar;