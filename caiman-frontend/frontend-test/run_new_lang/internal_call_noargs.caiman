value compute() -> i64 {
    let x = 10.
    returns x.
}

function class compute { compute_schedule }

value foo() -> i64 {
    let y = (compute () ).
    returns y.
}

function class foo_class { foo }

schedule compute {
    fn compute_schedule() -> &x
      at time my_time and space my_space
    {
        let x_slot := x.Prim;
        return x_slot;
    }
}

schedule foo {
    fn bar() -> &y 
      at time my_time and space my_space
    {
        let y_slot := y.Call.compute_schedule();
        return y_slot;
    }
}

timeline my_time(e : Event) -> Event {
    return e;
}

spatial my_space(bs : BufferSpace) -> BufferSpace {
    return bs;
}

pipeline main = bar;
