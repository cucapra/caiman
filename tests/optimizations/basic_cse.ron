// ARGS: -t basic-cse
(
	version : (0, 0, 1),
	program : (
		types : {0:I32},
		funclets : {
			0 : (
                // empty funclet - should remain empty, not cause crashes, etc
                kind : MixedImplicit,
                input_types : [],
                output_types : [],
                nodes : [],
                tail_edge : Return(return_values : []) 
            ),
            1 : (
                // no duplicates, nothing should be changed
                kind : MixedImplicit,
                input_types : [0],
                output_types : [0],
                nodes : [
                    Phi(index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [0]),
                    ExtractResult(node_id : 1, index : 0),
                ],
                tail_edge : Return(return_values : [2]) 
            ),
            2 : (
                // no duplicates, but with more complex dependencies (multi output)
                kind : MixedImplicit,
                input_types : [0],
                output_types : [0],
                nodes : [
                    Phi(index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [0]),
                    ExtractResult(node_id : 1, index : 0),
                ],
                tail_edge : Return(return_values : [0, 2]) 
            ),
            3 : (
                // both duplicates dependended on by the same node
                kind : MixedImplicit,
                input_types : [0],
                output_types : [0, 0],
                nodes : [
                    Phi(index : 0),
                    Phi(index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [0, 1])
                ],
                tail_edge : Return(return_values : [2]) 
            ),
            4 : (
                // both duplicates depended on by the tail
                kind : MixedImplicit,
                input_types : [0],
                output_types : [0, 0],
                nodes : [
                    Phi(index : 0),
                    Phi(index : 0)
                ],
                tail_edge : Return(return_values : [0, 1]) 
            ),
            5 : (
                // more complex: dependency *chains*, duplicates not trivially eq
                kind : MixedImplicit,
                input_types : [0],
                output_types : [0, 0],
                nodes : [
                    Phi(index : 0),
                    Phi(index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [0]),
                    CallExternalCpu(external_function_id : 0, arguments : [1])
                ],
                tail_edge : Return(return_values : [2, 3]) 
            ),
            6 : (
                // interleaved duplicate chain
                kind : MixedImplicit,
                input_types : [0],
                output_types : [0, 0],
                nodes : [
                    Phi(index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [0]),
                    Phi(index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [2])
                ],
                tail_edge : Return(return_values : [1, 3]) 
            ),
            7 : (
                // a sprawling mess of duplication
                kind : MixedImplicit,
                input_types : [0],
                output_types : [0, 0],
                nodes : [
                    Phi(index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [0]),
                    Phi(index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [2]),
                    ExtractResult(node_id : 3, index : 0),
                    ExtractResult(node_id : 1, index : 0),
                    CallExternalCpu(external_function_id : 0, arguments : [1, 5]),
                    CallExternalCpu(external_function_id : 0, arguments : [1, 4]),
                    CallExternalCpu(external_function_id : 0, arguments : [6, 7])
                ],
                tail_edge : Return(return_values : [3, 8]) 
            )
        }
	)
)