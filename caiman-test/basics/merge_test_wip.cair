version 0.0.2

type i64;
slot %slot0 : i64-ready-local;
event %event0 : local;

function @add(i64) -> i64;
function @main() -> i64;

external-cpu-pure[impl default @add] %add(i64) -> i64;

value[impl default @main] %foo() -> i64 {
    %res_t = call @add(%n1, %n2); // 8 + 5 = 13
    %res = extract %res_t 0;
    %n2_t = call @add(%x, %n1); // 3 + 5 = 8
    %n2 = extract %n2_t 0;
    %n1_t = call @add(%x, %y); // 3 + 2 = 5
    %n1 = extract %n1_t 0;
    %x = constant 3i64;
    %y = constant 2i64;
    return %res;
}

schedule[value $val = %foo, timeline $time = %time]
%foo_main<input($time.%e), output($time.%e)>() ->
[%out : %slot0] {
    %xloc = alloc-temporary-local-i64 %foo.%x;
    %_ = encode-do-local %foo.%x() -> %xloc;
    %yloc = alloc-temporary-local-i64 %foo.%y;
    %_ = encode-do-local %foo.%y() -> %yloc;

    %n1loc = alloc-temporary-local-i64 %foo.%n1;
    %_ = encode-do-local %foo.%n1_t(%xloc, %yloc) -> %n1loc;
    %n2loc = alloc-temporary-local-i64 %foo.%n2;
    %_ = encode-do-local %foo.%n2_t(%xloc, %n1loc) -> %n2loc;
    
    %resloc = alloc-temporary-local-i64 %foo.%res;
    %_ = encode-do-local %foo.%res_t(%n1loc, %n2loc) -> %resloc;
    return %resloc;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

pipeline "main" = %foo_main;