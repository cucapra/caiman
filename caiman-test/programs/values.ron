(
	version : (0, 0, 1),
	program : (
		native_interface : (
			types : {
				0 : I32,
			},
			external_cpu_functions : {
				0 : (name : "do_thing_on_cpu", input_types : [(0)], output_types : [(0)])
			},
			external_gpu_functions : {
				0 : (
					name : "do_thing_on_gpu", input_types : [(0)], output_types : [(0)], entry_point : "main", resource_bindings : [(group : 0, binding : 0, input : Some(0), output : None), (group : 0, binding : 1, input : None, output : Some(0))],
					shader_module_content : Wgsl
					("
						struct Output {field_0 : i32;};
						fn do_thing_on_gpu(a : i32) -> Output 
						{
							var output : Output;
							output.field_0 = a + 1;
							return output;
						}
						
						struct Input_0 { field_0 : i32; };
						[[group(0), binding(0)]] var<storage, read> input_0 : Input_0;
						struct Output_0 { field_0 : i32; };
						[[group(0), binding(1)]] var<storage, read_write> output_0 : Output_0;
						[[stage(compute), workgroup_size(1, 1, 1)]] fn main()
						{
							let output = do_thing_on_gpu(input_0.field_0);
							output_0.field_0 = output.field_0;
						}
					")
				)
			},
		),
		types : {
			0 : NativeValue(storage_type : (0)),
			1 : Slot(storage_type : (0), queue_stage : Ready, queue_place : Local ),
			2 : Event(place : Local),
		},
		funclets : {
			0 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 4, type_id : 0),
					ConstantInteger(value: 2, type_id : 0),
				],
				tail_edge : Return(return_values : [1])
			),

			1 : (
				kind : ScheduleExplicit,
				input_types : [1],
				output_types : [1],

				nodes : [
					Phi(index : 0),
					AllocTemporary(place : Local, storage_type : (0), 
						operation : (funclet_id : 0, node_id : 1)),
					EncodeDo(place : Local, 
						operation : (funclet_id : 0, node_id : 1), 
						inputs : [], outputs : [1]),
					AllocTemporary(place : Local, storage_type : (0), 
						operation : (funclet_id : 0, node_id : 2)),
					EncodeDo(place : Local, 
						operation : (funclet_id : 0, node_id : 2), 
						inputs : [], outputs : [3]),
				],
				tail_edge : Return(return_values : [3])
			),

			2 : (
				kind : Timeline,
				input_types : [2],
				output_types : [2],

				nodes : [
					Phi(index : 0),
				],
				tail_edge : Return(return_values : [0])
			),

			3 : (
				kind : Value,
				input_types : [0],
				output_types : [0],
				nodes : [
					Phi(index : 0),
					ConstantInteger(value: 1, type_id : 0),
					CallExternalCpu(external_function_id : 0, arguments : [0]),
					ExtractResult(node_id : 2, index : 0)
				],
				tail_edge : Return(return_values : [2])
			),

			4 : (
				kind : ScheduleExplicit,
				input_types : [1],
				output_types : [1],

				nodes : [
					Phi(index : 0),
					AllocTemporary(place : Local, storage_type : (0), 
						operation : (funclet_id : 3, node_id : 1)),
					EncodeDo(place : Local, 
						operation : (funclet_id : 3, node_id : 1), 
						inputs : [], outputs : [1]),
					AllocTemporary(place : Local, storage_type : (0), 
						operation : (funclet_id : 3, node_id : 2)),
					EncodeDo(place : Local, 
						operation : (funclet_id : 3, node_id : 3), 
						inputs : [0], outputs : [3]),
				],
				tail_edge : Return(return_values : [3])
			),

			5 : (
				kind : Timeline,
				input_types : [2],
				output_types : [2],

				nodes : [
					Phi(index : 0),
				],
				tail_edge : Return(return_values : [0])
			),
		},
		value_functions : {
			// 0 : (name : "trivial_function", input_types : [0], output_types : [0], default_funclet_id : Some(3)),
		},
		scheduling_funclet_extras : {
			// 1 : (
			// 	value_funclet_id : 0,
			// 	input_slots : {0 : (value_tag : Input(funclet_id : 0, index : 0), timeline_tag : None, spatial_tag : None)},
			// 	output_slots : {0 : (value_tag : None, timeline_tag : None, spatial_tag : None)},
			// 	input_fences : {},
			// 	output_fences : {},
			// 	input_buffers : {},
			// 	output_buffers : {},
			// 	external_timestamps : [],
			// 	external_spaces : [],
			// 	in_timeline_tag : Input(funclet_id : 2, index : 0),
			// 	out_timeline_tag : Output(funclet_id : 2, index : 0),
			// ),

			// 4 : (
			// 	value_funclet_id : 3,
			// 	input_slots : {0 : (value_tag : Input(funclet_id : 3, index : 0), timeline_tag : None, spatial_tag : None)},
			// 	output_slots : {0 : (value_tag : None, timeline_tag : None, spatial_tag : None)},
			// 	input_fences : {},
			// 	output_fences : {},
			// 	input_buffers : {},
			// 	output_buffers : {},
			// 	external_timestamps : [],
			// 	external_spaces : [],
			// 	in_timeline_tag : Input(funclet_id : 5, index : 0),
			// 	out_timeline_tag : Output(funclet_id : 5, index : 0),
			// )
		},
		pipelines : [
			(name : "pipeline_1", entry_funclet : 0),
			(name : "pipeline_2", entry_funclet : 3),
		]
	)
)