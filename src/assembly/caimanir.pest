// Definitions
//   pest
WHITESPACE = _{ "\t" | " " | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* | "/*" ~ ((!"*"  | "*" ~ !"/") ~ ANY)* ~ "*/" }
sep = _{ WHITESPACE+ }

//   baseline
id = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
n = @{ ASCII_DIGIT+ }
str_single = @{ "'" ~ (!"'" ~ !NEWLINE ~ ANY)* ~ "'" }
str_double = @{ "\"" ~ (!"\"" ~ !NEWLINE ~ ANY)* ~ "\"" }
str = @{ str_single | str_double }

// special keywords
none = @{ "none" }
pure = @{ "pure" }
hole = @{ "?" }
node_hole = @{ "???" }
throwaway = @{ "_" }
impl = @{ "impl" }
impl_sep = ${ impl ~ sep }

name = ${ "%" ~ (id | n | throwaway) | hole }
name_sep = ${ name ~ sep }
meta_name = ${ "$" ~ (id | throwaway) | hole }
meta_name_sep = ${ meta_name ~ sep }
funclet_loc_filled = ${ (meta_name | name) ~ "." ~ name }
funclet_loc = { funclet_loc_filled | hole }
funclet_loc_sep = ${ funclet_loc ~ sep }

//    ffi_types
ffi_type_base = { "i32" | "f32" | "f64" | "u8" | "u16" | "u32" | "u64" | "usize" | "i8" |
                      "i16" | "i32" | "i64" | "gpu_buffer_allocator" | "cpu_buffer_allocator" }
ffi_array_parameters = { "<" ~ ffi_type ~ "," ~ n ~ ">" }
ffi_tuple_parameters = { "<" ~ ffi_type ~ ("," ~ ffi_type)* ~ ">" } // must have at least one field
ffi_parameterized_ref_name = { "erased_length_array" | "const_ref" |
    "mut_ref" | "const_slice" | "mut_slice" | "gpu_buffer_ref" | "gpu_buffer_slice" |
    "cpu_buffer_ref" }

ffi_parameterized_ref = { ffi_parameterized_ref_name ~ "<" ~ ffi_type ~ ">" }
ffi_parameterized_type = !{ "array" ~ ffi_array_parameters | ffi_parameterized_ref | "tuple" ~ ffi_tuple_parameters }
ffi_type = { ffi_type_base | ffi_parameterized_type }
ffi_type_sep = ${ ffi_type ~ sep }

//   special names

typ = { ffi_type | name }
typ_sep = ${ typ ~ sep }
// using `?` rather than `hole` for ease of matching
place = { "local" | "cpu" | "gpu" | "?" }
stage = { "unbound" | "bound" | "encoded" | "submitted" | "ready" | "dead" | "?" }
constant_raw = { n ~ ffi_type }
constant = ${ constant_raw | hole }
tag_op = { "node" | "input" | "output" | "halt" }
tag = { none | tag_op ~ "(" ~ funclet_loc ~ ")" }

// Program
program = { SOI ~ version ~ definition* ~ EOI }

version_keyword = @{ "version" ~ sep }
version = ${ version_keyword ~ n ~ "." ~ n ~ "." ~ n }

definition = { type_def | funclet_def | pipeline }

// Types
ffi_type_decl = ${ "type" ~ sep ~ ffi_type }

name_typ_separator = !{ name ~ ":" ~ "" }
native_value_decl = ${ "native_value" ~ sep ~ name_typ_separator ~ typ }
slot_decl = ${ "slot_decl" ~ sep ~ name_typ_separator ~ typ ~ "-" ~ stage ~ "-" ~ place }
fence_decl = ${ "fence" ~ sep ~ name_typ_separator ~ place }
buffer_alignment_decl = !{ name ~ ":" ~ place ~ "<"
    ~ "alignment_bits" ~ "=" ~ n ~ "," ~ "byte_size" ~ "=" ~ n ~ ">" }

buffer_decl = ${ "buffer" ~ sep ~ buffer_alignment_decl}
event_decl = ${ "event" ~ sep ~ name_typ_separator ~ place }
scheduling_join_decl = ${ "scheduling_join" ~ sep ~ name }
buffer_space_decl = ${ "buffer_space" ~ sep ~ name }

type_def = { ffi_type_decl | native_value_decl | slot_decl | fence_decl | buffer_alignment_decl
    | buffer_decl | event_decl | scheduling_join_decl | buffer_space_decl }

// Funclets
funclet_def = { external_funclet | funclet | function_class }

impl_box = { "[" ~ impl_sep ~ name ~ "]" }

//   external
external_resource = { "resource" } // todo: cleanup
external_body = { external_resource ~ ("," ~ external_resource)* }
external_arg = { (name ~ ":")? ~ ffi_type }
external_args = { external_arg ~ ("," ~ external_arg)* }
external_loc = ${ "external-" ~ place ~ ("-" ~ pure)? }
external_funclet = { external_loc ~ impl_box
    ~ name ~ "(" ~ external_args? ~ ")" ~ "->"
    ~ "[" ~ external_args ~ "]" ~ ":" ~ str ~ "{" ~ external_body ~ "}" }

//   value functions
function_class_sep = @{ "function" ~ sep }
function_class_args = { typ ~ ("," ~ typ)* }
function_class = { function_class_sep ~ name ~ "("
    ~ function_class_args? ~ ")" ~ "->" ~ typ ~ ";" }

//   funclet
value_sep = @{ "value" ~ sep }
timeline_sep = @{ "timeline" ~ sep }
spatial_sep = @{ "spatial" ~ sep }
schedule_box_keyword = { value_sep | timeline_sep | spatial_sep }
schedule_box_component = { schedule_box_keyword ~ meta_name ~ "=" ~ name }
schedule_box_components = { schedule_box_component ~ ("," ~ schedule_box_component)* }
schedule_box = { "[" ~ schedule_box_components? ~ "]" }

funclet = { "value" ~ impl_box ~ value_funclet | "schedule" ~ schedule_box ~ schedule_funclet |
    timeline_sep ~ timeline_funclet | spatial_sep ~ spatial_funclet }

//   tail edges

node_list = { name ~ ("," ~ name)* }
node_box_raw = { "[" ~ node_list? ~ "]" }
node_box = { node_box_raw | hole }

return_sep = ${ "return" ~ sep }
return_args = { name | "[" ~ name ~ (", " ~ name)* ~ "]" }
return_command = { return_sep ~ return_args }
yield_sep = ${ "yield" ~ sep }
yield_command = { yield_sep ~ (n | hole) ~ node_box ~ name ~ name ~ node_box }
jump_sep = ${ "jump" ~ sep }
jump_command = { jump_sep ~ name ~ node_box }

schedule_call_sep = ${ "schedule-call" ~ sep }
schedule_call_command = { schedule_call_sep ~ funclet_loc ~ name ~ node_box ~ name }
schedule_select_sep = ${ "schedule-select" ~ sep }
tail_fn_nodes = { name ~ ("," ~ name)* }
tail_fn_box_raw = { "[" ~ tail_fn_nodes? ~ "]" }
tail_fn_box = { tail_fn_box_raw | hole }
schedule_select_command = { schedule_select_sep ~ funclet_loc ~ name ~ tail_fn_box ~ node_box ~ name }

dynamic_alloc_sep = ${ "dynamic-alloc" ~ sep }
tail_option_node = { name | none }
tail_option_nodes = { tail_option_node ~ ("," ~ tail_option_node)* }
tail_option_box_raw = { "[" ~ tail_option_nodes? ~ "]" }
tail_option_box = { tail_option_box_raw | hole }
dynamic_alloc_command = { dynamic_alloc_sep ~ name ~ node_box ~ tail_option_box ~ name ~ name ~ name }

tail_edge = { return_command | yield_command | jump_command |
    schedule_call_command | schedule_select_command | dynamic_alloc_command }

//   header setup

funclet_arg = { (name ~ ":")? ~ typ }
funclet_args = { funclet_arg ~ ("," ~ funclet_arg)* }
funclet_return = { "[" ~ funclet_args ~ "]" | typ }
funclet_header = { name ~ "(" ~ funclet_args? ~ ")" ~ "->" ~ funclet_return }

value_assign = { name ~ "=" ~ value_command }
value_funclet = { funclet_header ~ "{" ~ (value_assign ~ ";")* ~ tail_edge ~ ";" ~ "}" }

timeline_assign = { name ~ "=" ~ timeline_command }
timeline_funclet = { funclet_header ~ "{" ~ ((timeline_assign | tail_edge | node_hole) ~ ";")* ~ "}" }

spatial_assign = { name ~ "=" ~ spatial_command }
spatial_funclet = { funclet_header ~ "{" ~ ((spatial_assign | tail_edge | node_hole) ~ ";")* ~ "}" }

schedule_typ = ${ (tag ~ sep)* ~ typ }
schedule_arg = { (name ~ ":")? ~ schedule_typ }
schedule_args = { schedule_arg ~ ("," ~ schedule_arg)* }
schedule_return = { "[" ~ schedule_args ~ "]" | typ }
schedule_header = { name ~ "<" ~ tag ~ "," ~ tag ~ ">" ~ "(" ~ funclet_args? ~ ")" ~ "->" ~ funclet_return }

schedule_assign = { name ~ "=" ~ schedule_command }
schedule_funclet = { schedule_header ~ "{" ~ ((schedule_assign | tail_edge | node_hole) ~ ";")* ~ "}" }

//    commands

phi_command = ${ "phi" ~ sep ~ n }

//     value

constant_command = ${ "constant" ~ sep ~ constant }
extract_sep = @{ "extract" ~ sep }
extract_command = { extract_sep ~ name ~ n }
call_sep = @{ "call" ~ sep }
call_args = { name ~ ("," ~ name)* }
call_command = { call_sep ~ name ~ ("<" ~ call_args? ~ ">" | hole )? ~ ("(" ~ call_args? ~ ")" | hole ) }
select_sep = @{ "select" ~ sep }
select_command = { select_sep ~ name ~ name ~ name }

value_command = { phi_command | constant_command |
    extract_command | call_command | select_command }

//     scheduling

alloc_temporary_command = ${ "alloc-temporary-" ~ place ~ "-" ~ typ ~ sep ~ funclet_loc }
encode_do_sep = ${ "encode-do-" ~ place ~ sep }
encode_do_args = { name ~ ("," ~ name)* }
encode_do_params = { "(" ~ encode_do_args? ~ ")" }
encode_do_call = { funclet_loc ~ ( encode_do_params | hole ) }
encode_do_command = { encode_do_sep ~ ( encode_do_call | hole ) ~ "->" ~ name }
create_command = ${ "create-" ~ place ~ "-" ~ typ ~ sep ~ funclet_loc }
drop_command = ${ "drop" ~ sep ~ name }
alloc_sep = ${"alloc-" ~ place ~ "-" ~ typ ~ sep}
alloc_command = { alloc_sep ~ name ~ funclet_loc }
encode_copy_sep = ${ "encode-copy-" ~ place ~ sep }
encode_copy_command = { encode_copy_sep ~ name ~ name }
submit_command = ${ "submit-" ~ place ~ sep ~ funclet_loc }
encode_fence_command = ${ "encode-fence-" ~ place ~ sep ~ funclet_loc }
sync_fence_sep = ${ "sync-fence-" ~ place ~ sep }
sync_fence_command = { sync_fence_sep ~ name ~ funclet_loc }
inline_join_sep = @{ "inline-join" ~ sep }
inline_join_command = { inline_join_sep ~ name ~ node_box ~ name }
serialized_join_sep = @{ "serialized-join" ~ sep }
serialized_join_command = { serialized_join_sep ~ name ~ node_box ~ name }
default_join_command = { "default-join" }

schedule_command = { phi_command | alloc_temporary_command | encode_do_command | create_command |
    drop_command | alloc_command | encode_copy_command | submit_command | encode_fence_command  |
    sync_fence_command | inline_join_command | serialized_join_command | default_join_command }

//     timeline

sync_sep = ${ "sync-" ~ place ~ "->" ~ place ~ sep }
sync_command = { sync_sep ~ name ~ name }
submission_command = ${ "submission-" ~ place ~ "->" ~ place ~ sep ~ name }

timeline_command = { phi_command | sync_command | submission_command }

//     spatial

spatial_command = { "INVALID" } // empty for now...

// Pipelines
pipelines = { (pipeline ~ ";")+ }
pipeline_sep = @{ "pipeline" ~ sep }
pipeline = { pipeline_sep ~ str ~ "=" ~ name }