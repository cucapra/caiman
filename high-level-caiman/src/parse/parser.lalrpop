use super::ast::*;
use super::ast_factory::ASTFactory;
use crate::error::CustomParsingError;

grammar(astf: &ASTFactory);

extern {
    type Error = CustomParsingError;
}

match {
  r#"".*""#, // String Literal
  r"[a-zA-Z][a-zA-Z0-9_]*", // Id
  r"[0-9]+[.][0-9]+",   // Float Constant
  r"[0-9]+",            // Integer Constant (we parse negatives as unary ops)

  // Keywords (omitting things with symbols in here is ok for some reason)
  "val", "feq", "fn", "tmln", "pipeline", "extern", "sptl", "type", "impls", "const",
  "let", "returns", "return", "var", "if", "else",
  "i32", "i64", "bool", "Event", "BufferSpace",
  "true", "false",
  "pure",
  "node","none","input","output","usable","save","need","dead",


  r"\s*" => { }, // Whitespace
  r"//[^\n\r]*[\n\r]*" => { }, // Double-slash comments

  _, // Everything else
}


pub Program: Program = { 
    "#version" <maj_min: r"[0-9]+[.][0-9]+"> "." <patch: r"[0-9]+">
    <tls: TopLevel*> =>? astf.program(maj_min, patch, tls), 
}

TopLevel: TopLevel = {
    <ClassMembers> => astf.singleton_function_class(<>),
    <@L> 
    "feq" <Id> "{" <ClassMembers+> "}" 
    <@R> => astf.function_class(<>),

    <@L>
    "tmln" <Id> "(" <CommaList<Arg<BaseType>>> ")" "->" <MaybeNamed<BaseType>>
    "{"
        <SpecStmt*>
    "}"
    <@R> => astf.time_funclet(<>),

    <@L>
    "sptl" <Id> "(" <CommaList<Arg<BaseType>>> ")" "->" <MaybeNamed<BaseType>>
    "{"
        <SpecStmt*>
    "}"
    <@R> => astf.space_funclet(<>),

    <l: @L>
    "const" <n: Id> "=" <e: SchedExpr> <u: (";")?>
    <r: @L> =>? astf.const_def(l, n, e, r),

    <@L> "pipeline" <Id> "{"
        <Id>
    "}" <@R> => astf.pipeline(<>),

    <@L> "fn" <Id> "(" <CommaList<Arg<FullType>>> ")" <("->" <FullType>)?>
        "impls" <CommaList<Id>>
    "{"
        <SchedStmt*>
    "}" <@R> => astf.sched_function(<>),

    <l: @L>
    "type" <n: Id> "=" <t: FlaggedType> <u: (";")?>
    <r: @R> => astf.type_def(l, n, t, r),
}

ClassMembers: ClassMembers = {
    <@L>
    "val" <Id> "(" <CommaList<Arg<BaseType>>> ")" <("->" <MaybeNamed<BaseType>>)?>
    "{"
        <SpecStmt*>
    "}"
    <@R> => astf.value_funclet(<>),

    <@L>
    "extern" "(" <Id> ")" <Id> "(" <CommaList<MaybeNamed<BaseType>>> ")" 
        <("->" <MaybeNamed<BaseType>>)?> <ExternDef?>
    <@R> => astf.extern_func(<>),

    <@L>
    "extern" "(" <Id> ")" "pure" <Id> "(" <CommaList<MaybeNamed<BaseType>>> ")" 
        <("->" <MaybeNamed<BaseType>>)?> <ExternDef?>
    <@R> => astf.extern_pure_func(<>),
}

ExternDef: ExternDef = {
    <@L>"{" 
        <CommaList<ExternDefMembers>>
    "}" <@R> =>? astf.extern_def(<>),
}

ResMembers: ResourceMembers = {
    <k: Id> ":" <n: r"[0-9]+"> => ResourceMembers::Numeric(String::from(k), String::from(n)),
    "input" ":" <v: Id> => ResourceMembers::Input(String::from(v)),
    "output" ":" <v: Id> => ResourceMembers::Output(String::from(v)),
}

ExternDefMembers: ExternDefMembers = {
    <l: @L> <f: Id> "{" 
        <d: CommaList<ResMembers>> 
    "}" <r: @R> =>? astf.extern_resource(l, d, r).map(|r| ExternDefMembers::Resource(r)),
    <k: Id> ":" <n: StringLiteral> => ExternDefMembers::StrVal(String::from(k), String::from(n)),
    <k: Id> ":" <n: r"[0-9]+"> => ExternDefMembers::Dimensions(String::from(k), String::from(n)),
}



// TYPES

BaseType: DataType = {
    "i32"  => DataType::Num(NumberType::I32),
    "i64"  => DataType::Num(NumberType::I64),
    "bool" => DataType::Bool,
    "Event" => DataType::Event,
    "BufferSpace" => DataType::BufferSpace,
    <n: Id> => DataType::UserDefined(String::from(n)),
    "(" <TupleCommaList<BaseType>> ")" => DataType::Tuple(<>),
    "[" <t: BaseType> ";" <l: @R> <n: r"[0-9]+"> <r: @R>"]" => DataType::Array(Box::new(t), Box::new(SpecExpr::Term(astf.spec_lit(l, SpecLiteral::Int(String::from(n)), r)))),
    "[" <t: BaseType> ";" <l: @L> <n: Id> <r: @R> "]" => DataType::Array(Box::new(t), Box::new(SpecExpr::Term(astf.spec_var(l, String::from(n), r)))),
    "[" <BaseType> "]" => DataType::Slice(Box::new(<>)),
}

FullType: FullType = {
    <FlaggedType> => FullType {
        base: <>,
        tags: vec![],
    },
    <b: FlaggedType> <t: TagOp> => FullType {
        base: b,
        tags: t,
    },
}

TagOp: Vec<Tag> = {
    "@" "[" <CommaList<Tag>> "]" => <>,
    "@"  <Tag> => vec![<>],
}

Tag: Tag = {
    <@L> <Quotient> "(" <QuotRef> ")" "-" <Flow> <@R> => astf.tag(<>),
}

Quotient: Option<Quotient> = {
    "node" => Some(Quotient::Node),
    "none" => Some(Quotient::None),
    "input" => Some(Quotient::Input),
    "output" => Some(Quotient::Output),
    "?" => None,
}

Flow: Option<Flow> = {
    "usable" => Some(Flow::Usable),
    "save" => Some(Flow::Save),
    "need" => Some(Flow::Need),
    "dead" => Some(Flow::Dead),
    "?" => None,
}

QuotRef: Option<QuotientReference> = {
    <a: Id> "." <b: Id> => Some(QuotientReference {
        spec_name: String::from(a),
        spec_var: Some(String::from(b)),
    }),
    <a: Id> => Some(QuotientReference {
        spec_name: String::from(a),
        spec_var: None,
    }),
    "?" => None,
}

FlaggedType: FlaggedType = {
    <@L> <BaseType> <("'" "<" <CommaList<FlagOrSetting>> ">")?> <@R> => astf.flagged_type(<>)
}

FlagOrSetting: (String, Option<String>) = {
    <n: Id> => (String::from(n), None),
    <n: Id> "=" <v: StringLiteral> => (String::from(n), Some(String::from(v))),
    <n: Id> "=" <v: r"[0-9]+"> => (String::from(n), Some(String::from(v))),
}

// SPEC LANGUAGE SECTION

SpecStmt: SpecStmt = {
    <@L> <CommaList<MaybeArg<BaseType>>> ":-" <SchedExpr> <@R> =>? astf.spec_decl(<>),
    <@L> "returns" <SchedExpr> <@R> =>? astf.spec_returns(<>),
}

// SCHEDULE LANGUAGE SECTION

SchedStmt: SchedStmt = {
    <@L> "let" <CommaList<MaybeArg<FullType>>> "=" <SchedExpr> ";" <@R> => astf.sched_let_decl(<>),
    <@L> "var" <CommaList<MaybeArg<FullType>>> "=" <SchedExpr> ";" <@R> => astf.sched_var_decl(<>),
    <@L> <Id> "=" <SchedExpr> ";" <@R> => astf.sched_assign(<>),
    <Block> => <>,
    <@L> "return" <SchedExpr> ";" <@R> => astf.sched_return(<>),
    <@L> "???" ";" <@R> => astf.sched_hole_stmt(<>),
    <@L> <SchedCallStmt> ";" <@R> => astf.sched_call_stmt(<>),
}

Block: SchedStmt = {
    <MatchedIf> => <>,
    <UnmatchedIf> => <>,
}

UnmatchedIf: SchedStmt = {
    <@L> "if" <SchedExpr> "{" <SchedStmt*> "}" <("else" <UnmatchedIf>)?> <@R> => astf.sched_if(<>),
}

MatchedIf: SchedStmt = {
    <@L> "if" <SchedExpr> "{" <SchedStmt*> "}" "else" <MatchedIf> <@R> => astf.sched_matched_if(<>),
    <@L> "{" <SchedStmt*> "}" <@R> => astf.sched_block(<>),
}

#[inline]
SchedTerm: SchedTerm = {
    <@L> <SchedCall> <@R> => astf.sched_call_expr(<>),
}

#[inline]
SchedCall: SchedFuncCall = {
    <Term> <TemplateArgs?> 
        "(" <CommaList<SchedExpr>> ")" <TagOp?> => astf.sched_fn_call(<>),
}

SchedCallStmt: SchedFuncCall = {
    <SchedCall> => <>,
    <Term> "[" <EncodedStmt> "]" 
        <TagOp?> => astf.sched_encode(<>),
}

#[inline]
SchedAtom<L>: SchedTerm = {
    <@L> "?" <@R> => astf.sched_hole_expr(<>),
    <@L> <Id> <TagOp?> <@R> => astf.sched_var(<>),
    <@L> <L> <TagOp?> <@R> => astf.sched_lit(<>),
}

#[inline]
SchedExpr: SchedExpr = {
    <Conditional>
}

TemplateArgs: TemplateArgs = {
    "'" "<" <CommaList<Arith>> ">" =>? astf.template_args(<>),
    "'" <FlaggedType>  => TemplateArgs::Type(<>),

}

EncodedStmt: EncodedStmt = {
    <@L> <CommaList<MaybeArg<FlaggedType>>> "<-" <SchedExpr> <@R> => astf.encoded_stmt(<>),
} 


// MISC

Arg<T>: Arg<T> = { <i: Id> ":" <t: T> => (i, t) }

// argument with optional type
MaybeArg<T> : (String, Option<T>) = {
    <i: Id> ":" <t: T> => (String::from(i), Some(t)),
    <i: Id> => (String::from(i), None),
}

// argument with optional name
MaybeNamed<T> : (Option<String>, T) = {
    <i: Id> ":" <t: T> => (Some(String::from(i)), t),
    <t: T> => (None, t),
}

// cannot start with a number or underscore
Id: String = { r"[a-zA-Z][a-zA-Z0-9_]*" => String::from(<>) }

StringLiteral: String = { 
    r#"".*""# => {
        let mut s = String::from(<>);
        // remove opening and closing quotes
        s.pop();
        s.remove(0);
        s
    }
}

CommaList<T>: Vec<T> = {
    <mut v: (<T> ",")*> <e: T?> => match e { 
        None => v, 
        Some(e) => {
            v.push(e);
            v
        },
    }
}

// Comma list which needs at least one comma
TupleCommaList<T>: Vec<T> = {
    <mut v: (<T> ",")+> <e: T?> => match e {
        None => v,
        Some(e) => { 
            v.push(e);
            v
        },
    }
}

// Generalized Expressions

//  Precedence (Ordered lowest to highest)
//     Conditional
//     Range | Cons
//     BitOr
//     BitXor
//     BitAnd
//     LShift | RShift | AShift
//     Logical Or
//     Logical And
//     Comparisons (LT, LEQ, GT, GEQ, EQ, NEQ)
//     Add | Sub
//     Mul | Div | Mod
//     Unary
//     Dot | Index | Function Call


Conditional: SchedExpr = {
    <@L> <Range> "if" <Range> "else" <Conditional> <@R> => astf.conditional(<>),
    Range,
}

Range: SchedExpr = {
    <@L> <BitDisjunction> ".." <BitDisjunction> <@R> => astf.range(<>),
    <@L> <BitDisjunction> <ConsOp> <Range> <@R> => astf.binop(<>),
    BitDisjunction,
}

BitDisjunction: SchedExpr = {
    <@L> <BitDisjunction> <BitOr> <BitXor> <@R> => astf.binop(<>),
    BitXor,
}

BitXor: SchedExpr = {
    <@L> <BitXor> <BitXorOp> <BitConjunction> <@R> => astf.binop(<>),
    BitConjunction,
}

BitConjunction: SchedExpr = {
    <@L> <BitConjunction> <BitAnd> <ShiftExpr> <@R> => astf.binop(<>),
    ShiftExpr,
}

ShiftExpr: SchedExpr = {
    <@L> <ShiftExpr> <ShiftOp> <Disjunction> <@R> => astf.binop(<>),
    Disjunction,
}

Disjunction: SchedExpr = {
    <@L> <Disjunction> <OrOp> <Conjunction> <@R> => astf.binop(<>),
    Conjunction,
}

Conjunction: SchedExpr = {
    <@L> <Conjunction> <AndOp> <Cmp> <@R> => astf.binop(<>),
    Cmp,
}

Cmp: SchedExpr = {
    <@L> <Cmp> <CmpOp> <Arith> <@R> => astf.binop(<>),
    Arith,
}

Arith: SchedExpr = {
    <@L> <Arith> <Class1Op> <Factor> <@R> => astf.binop(<>),
    Factor,
}

Factor: SchedExpr = {
    <@L> <Factor> <Class2Op> <Unary> <@R> => astf.binop(<>),
    Unary,
}

Unary: SchedExpr = {
    <@L> <UnOp> <Unary> <@R> => astf.uop(<>),
    Term,
}

Term: SchedExpr = {
    <SchedTerm> => NestedExpr::Term(<>),
    <l: @L> <lhs: Term> "[" <rhs: Range> "]" <r: @R> => astf.binop(l, lhs, Binop::Index, rhs, r),
    <@L> <Term> <DotOp> <Atom<LiteralNoNumber>> <@R> => astf.binop(<>),
    Atom<Literal>,
}

#[inline]
Atom<L>: SchedExpr = {
    <SchedAtom<L>> => NestedExpr::Term(<>),
    "(" <Conditional> ")",
}

// Operators

ConsOp: Binop = {
    "::" => Binop::Cons,
}

BitOr: Binop = {
    "|" => Binop::Or,
}

BitXorOp: Binop = {
    "^" => Binop::Xor,
}

BitAnd: Binop = {
    "&" => Binop::And,
}

ShiftOp: Binop = {
    "<<" => Binop::Shl,
    ">>" => Binop::Shr,
    ">>>" => Binop::AShr,
}

AndOp: Binop = {
    "&&" => Binop::Land,
}

OrOp: Binop = {
    "||" => Binop::Lor,
}

CmpOp: Binop = {
    "<" => Binop::Lt,
    "<=" => Binop::Leq,
    ">" => Binop::Gt,
    ">=" => Binop::Geq,
    "==" => Binop::Eq,
    "!=" => Binop::Neq,
}

Class1Op: Binop = {
    "+" => Binop::Add,
    "-" => Binop::Sub,
}

Class2Op: Binop = {
    "*" => Binop::Mul,
    "/" => Binop::Div,
    "%" => Binop::Mod,
}

DotOp: Binop = {
    "." => Binop::Dot,
}

UnOp: Uop = {
    "-" => Uop::Neg,
    "!" => Uop::LNot,
    "~" => Uop::Not,
}

Literal: SchedLiteral = {
    <l: @L> <n: r"[0-9]+"> <r: @R> => SchedLiteral::Int(String::from(n)),
    <n: r"[0-9]+[.][0-9]+"> => SchedLiteral::Float(String::from(n)),
    <LiteralNoNumber> => <>,
}

LiteralNoNumber: SchedLiteral = {
    "true" => SchedLiteral::Bool(true),
    "false" => SchedLiteral::Bool(false),
    "(" <TupleCommaList<SchedExpr>> ")" => SchedLiteral::Tuple(<>),
    "[" <CommaList<SchedExpr>> "]" => SchedLiteral::Array(<>),
}
