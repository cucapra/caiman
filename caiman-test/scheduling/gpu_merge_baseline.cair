version 0.0.1

types [
    i32,
    i64,
    native_value $native_i32 {
        type : i32
    },
    slot $slot_local {
        type : i32,
        stage : ready,
        place : local,
    },
    slot $slot_gpu {
        type : i32,
        stage : ready,
        place : gpu,
    },
    buffer $buffer_gpu {
        place : gpu,
        static_layout_opt : {
            alignment_bits : 0,
            byte_size : 1024
        },
    },
    event $event0 {
        place : local
    },
    space_buffer $buffer_space {},
]

    external_cpu @flatten(i64) -> i32;
external_cpu @cpu_add(i64, i64) -> i64;

external_gpu @gpu_add(%x : i32, %y : i32) -> [%out : i32] : "src/gpu_merge.wgsl"
{
    resource {
        group : 0,
        binding : 0,
        input : %x,
    },
    resource {
        group : 0,
        binding : 1,
        input : %y,
    },
    resource {
        group : 0,
        binding : 2,
        output : %out,
    }
}

value @foo() -> i32 {
    %res_t = call @cpu_add(%x, %g);
    %res = extract %res_t 0;
    %g_t = call @gpu_add(%x, %y);
    %g = extract %g_t 0;

    %xc = constant 3i64;
    %yc = constant 2i64;

    %x_t = call @flatten(%xc);
    %x = extract %x_t 0;
    %y_t = call @flatten(%yc);
    %y = extract %y_t 0;

    return %res;
}

timeline @foo_time(%e : $event0) -> $event0 {
    %sub1 = submission-local->gpu %e;
    %sync1 = sync-local->gpu %sub1 %sub1;
    return %sync1;
}

schedule @foo_main(%s : $slot_local, %in_buff : $buffer_gpu, %out_buff : $buffer_gpu) -> $slot_gpu {
    %xc = alloc-temporary-local-i64 @foo.%xc;
    %_ = encode-do-local @foo.%xc() -> %xc;
    %yc = alloc-temporary-local-i64 @foo.%yc;
    %_ = encode-do-local @foo.%yc() -> %yc;

    %x_local = alloc-temporary-local-i32 @foo.%x;
    %_ = encode-do-local @foo.%x_t(%xc) -> %x_local;
    %y_local = alloc-temporary-local-i32 @foo.%y;
    %_ = encode-do-local @foo.%y_t(%yc) -> %y_local;

    %x = alloc-gpu-i32 %in_buff @foo.%x;
    %_ = encode-copy-gpu %x_local %x;

    %y = alloc-gpu-i32 %in_buff @foo.%y;
    %_ = encode-copy-gpu %y_local %y;

    %g = alloc-gpu-i32 %out_buff @foo.%g;
    %_ = encode-do-gpu @foo.%g_t(%x, %y) -> %g;
    %_ = submit-gpu @foo_time.%sub1;
    %fg = encode-fence-gpu @foo_time.%sub1;
    %_ = sync-fence-local %fg @foo_time.%sync1;

    //todo: schedule res once cpu allocation is a thing

    return %g;
}

spatial @foo_space(%bs : $buffer_space) -> $buffer_space {
    return %bs;
}

extras {
    @foo_main {
        value : @foo,
        input_slots : {
            %s : slot_info()
        },
        output_slots : {
            %s : slot_info(spatial_tag output @foo_space.%bs)
        },
        input_fences : {},
        output_fences : {},
        input_buffers : {%in_buff : buffer_info(spatial_tag input @foo_space.%bs),
            %out_buff : buffer_info(spatial_tag input @foo_space.%bs)},
        output_buffers : {},
        in_timeline_tag : timeline_tag input @foo_time.%e,
        out_timeline_tag : timeline_tag output @foo_time.%e,
    },
}

pipeline "main" = @foo_main;