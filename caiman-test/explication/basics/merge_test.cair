// implements:
// fn foo() -> i64 {
//     x = 3;
//     y = 2;
//     n1 = x + y;
//     n2 = x + n1;
//     return n1 + n2;
// }

// tests the chain of operation deductions

version 0.0.2

ffi i64;
event %event0;
buffer_space %buffspace;
native_value %i64 : i64;

function @add(%i64, %i64) -> %i64;
function @main() -> %i64;

external-cpu-pure[impl @add] %add(i64, i64) -> i64;

value[impl default @main] %foo() -> [%out: %i64] {
    %res_t = call @add(%n1, %n2); // 8 + 5 = 13
    %res = extract %res_t 0;
    %n2_t = call @add(%x, %n1); // 3 + 5 = 8
    %n2 = extract %n2_t 0;
    %n1_t = call @add(%x, %y); // 3 + 2 = 5
    %n1 = extract %n1_t 0;
    %x = constant %i64 3;
    %y = constant %i64 2;
    return %res;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_main<$time-usable, $time-usable>() ->
[%out : $val.%out-usable %i64] {
    %alloc1 = alloc-temporary local [] i64;
    %alloc2 = alloc-temporary local [] i64;
    %alloc3 = alloc-temporary local [] i64;
    %alloc4 = alloc-temporary local [] i64;
    %alloc5 = alloc-temporary local [] i64;

    local-do-builtin ?() -> %alloc1;
    local-do-builtin ?() -> %alloc2;
    %_ = read-ref i64 %alloc1;
    %_ = read-ref i64 %alloc2;

    local-do-external %add ?(?, ?) -> %alloc3;
    %_ = read-ref i64 %alloc3;
    local-do-external %add ?(?, ?) -> %alloc4;
    %_ = read-ref i64 %alloc4;
    local-do-external %add ?(?, ?) -> %alloc5;
    
    %res_val = read-ref i64 %alloc5;
    return %res_val;
}

pipeline "main" = %foo_main;