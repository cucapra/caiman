#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }

val main() -> i64 {
    a :- 3
    b :- 5
    c :- 7

    j :- add_three(a, b, c)
    k :- add_three(a, b, c)
    r :- j + k
    returns r
}

feq add_three {
    val add1(a: i64, b: i64, c: i64) -> i64 {
        t :- a + b
        t2 :- t + c
        returns t2
    }

    val add2(a: i64, b: i64, c: i64) -> i64 {
        t :- b + c
        t2 :- a + t
        returns t2
    }
}

fn add1_impl(a: i64, b: i64, c: i64) -> i64 @ output(add1.t2) impls add1, time, space
{
    let t = a + b;
    let p = t + c;
    p
}

fn add2_impl(a: i64, b: i64, c: i64) -> i64 @ output(add2.t2) impls add2, time, space
{
    let t = b + c;
    let p = a + t;
    p
}


fn main_impl() -> i64 @ node(main.r)
    impls main, time, space
{
    let a = 3;
    let b = 5;
    let c = 7;

    let a2 = 3;
    let b2 = 5;
    let c2 = 7;
    let j = add1_impl(a, b, c);
    let k = add2_impl(a2, b2, c2);
    let r = j + k;
    r
    
}

pipeline main { main_impl }