#version 0.1.0
tmln time(e: Event) -> Event { returns e }
sptl space(s: BufferSpace) -> BufferSpace { returns s }


feq rec_sum {
    extern(cpu) pure rec_sum_cpu(i32, i32) -> i32

    extern(gpu) rec_sum_gpu(x: i32, y: i32) -> out: i32 {
        path : "rec_sum_gpu.comp",
        entry : "main",
        dimensions : 3,
        resource {
            group : 0,
            binding : 0,
            input : x
        },
        resource {
            group : 0,
            binding : 1,
            input : y
        },
        resource {
            group : 0,
            binding : 2,
            output : out
        }
    }

    val rec_sum(a: i32, b: i32) -> i32 {
        returns 0 if a > b else 
                a if a == b else
                rec_sum'<_dim0, _dim1, _dim2>(a + 1, b) + a
    }
}

val select_sum(a: i32, b: i32, c: i32) -> i32 {
    x :- rec_sum'<1, 1, 1>(a, b)
    returns rec_sum'<1, 1, 1>(b, c) if x < 0 else x
}

tmln double_sync(e: Event) -> out: Event {
    loc1, rem1 :- encode_event(e)
    sub :- submit_event(rem1)
    loc2, rem2 :- encode_event(loc1, sub)
    sub2 :- submit_event(rem2)
    f1 :- sync_event(loc2, sub)
    f2 :- sync_event(f1, sub2)
    returns f2
}

fn select_sum_gpu(a: i32, b: i32, c: i32) -> i32 
    impls select_sum, double_sync, space 
{
    let f1, f2 = ???;
    let x = (await f1).x_gpu;
    let r = (await f2).r_gpu;

    if x < 0 {
        r
    } else {
        x
    }
}

fn select_sum_gpu_wait(a: i32, b: i32, c: i32) -> i32 
    impls select_sum, double_sync, space 
{
    let f1, f2 = ???;
    /* #CHECK:
    Funclet(
            Funclet {
                kind: ScheduleExplicit,
                header: FuncletHeader {
                    name: FuncletId(
                        "select_sum_gpu_wait",
                    ),
                    ...
                },
                commands: [
                    ...
                    Empty,
    #END */
    let x = (await f1).x_gpu;
    if x < 0 {
        /* #CHECK:
        FuncletArgument {
            name: Some(
                NodeId(
                    "f2%0",
                ),
            ),
            typ: TypeId(
                "Fence",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "sptl",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "sub2",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
            ],
        },
        #END
        #CHECK:
        FuncletArgument {
            name: Some(
                NodeId(
                    "f2%0::r_gpu",
                ),
            ),
            typ: TypeId(
                "i32::gds",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: Some...
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "sptl",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Saved,
                    ),
                },
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "tmln",
                            ),
                            node: Some(
                                Filled(
                                    NodeId(
                                        "sub2",
                                    ),
                                ),
                            ),
                        },
                    ),
                    flow: Filled(
                        Usable,
                    ),
        #END */
        (await f2).r_gpu
    } else {
        let _ = await f2;
        x
    }
}


// fn select_sum_gpu3(a: i32, b: i32, c: i32) -> i32 
//     impls select_sum, double_sync, space 
// {
//     let f1, f2 = ???;
//     let x = (await f1).?;
//     let r = (await f2).r_gpu;

//     if x < 0 {
//         r
//     } else {
//         x
//     }
// }

// fn select_sum_gpu2(a: i32, b: i32, c: i32) -> i32 
//     impls select_sum, double_sync, space 
// {
//     ???;
//     let x = (await ?).x_gpu;
//     let r = (await ?).r_gpu;

//     if x < 0 {
//         r
//     } else {
//         x
//     }
// }

pipeline main { select_sum_gpu }