// Definitions
//   pest
WHITESPACE = _{ "\t" | " " | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* | "/*" ~ ((!"*"  | "*" ~ !"/") ~ ANY)* ~ "*/" }
sep = _{ WHITESPACE+ }

//   baseline
id = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
n = @{ ASCII_DIGIT+ }
none = { "none" }
str_single = @{ "'" ~ (!"'" ~ !NEWLINE ~ ANY)* ~ "'" }
str_double = @{ "\"" ~ (!"\"" ~ !NEWLINE ~ ANY)* ~ "\"" }
str = @{ str_single | str_double }
hole = { "?" }
node_hole = { "???" }

type_name = ${ "$" ~ id | hole }
type_name_sep = ${ type_name ~ sep }
throwaway = { "_" }
var_name = ${ "%" ~ (id | n | throwaway) | hole }
var_name_sep = ${ var_name ~ sep }
fn_name = ${ "@" ~ id | hole }
fn_name_sep = ${ fn_name ~ sep }
funclet_loc_filled = ${ fn_name ~ "." ~ var_name }
funclet_loc = { funclet_loc_filled | hole }
funclet_loc_sep = ${ funclet_loc ~ sep }

//    ffi_types
ffi_type_base = { "i32" | "f32" | "f64" | "u8" | "u16" | "u32" | "u64" | "usize" | "i8" |
                      "i16" | "i32" | "i64" | "gpu_buffer_allocator" | "cpu_buffer_allocator" }
ffi_ref_parameter = { "<" ~ ffi_type ~ ">"}
ffi_array_parameters = { "<" ~ ffi_type ~ "," ~ n ~ ">" }
ffi_tuple_parameters = { "<" ~ ffi_type ~ ("," ~ ffi_type)* ~ ">" } // must have at least one field
ffi_parameterized_ref_name = { "erased_length_array" | "const_ref" |
    "mut_ref" | "const_slice" | "mut_slice" | "gpu_buffer_ref" | "gpu_buffer_slice" |
    "cpu_buffer_ref" }

ffi_parameterized_array = { "array" ~ ffi_array_parameters } // kinda lazy tbh, but annoying to make nicer
ffi_parameterized_ref = { ffi_parameterized_ref_name ~ ffi_ref_parameter }
ffi_parameterized_tuple = { "tuple" ~ ffi_tuple_parameters }
// ffi_parameterized_struct = TODO
ffi_parameterized_type = !{ ffi_parameterized_array | ffi_parameterized_ref | ffi_parameterized_tuple }
ffi_type = { ffi_type_base | ffi_parameterized_type }
ffi_type_sep = ${ ffi_type ~ sep }

// extra names

typ = { ffi_type | type_name | hole }
typ_sep = ${ typ ~ sep }
place = { "local" | "cpu" | "gpu" | "?" }
stage = { "unbound" | "bound" | "encoded" | "submitted" | "ready" | "dead" | "?" }
constant_raw = { n ~ ffi_type }
constant = ${ constant_raw | hole }

//   tags
tag_core_op = { "operation" | "input" | "output" }
tag_core = ${ none | tag_core_op ~ sep ~ funclet_loc }
tag_halt = ${ "halt" ~ sep ~ var_name }
value_tag_op = { "function_input" | "function_output" }
value_tag_loc = ${ value_tag_op ~ sep ~ funclet_loc }
value_tag_data = { tag_core | value_tag_loc | tag_halt }
value_tag_sep = @{ "value_tag" ~ sep }
value_tag = { value_tag_sep ~ value_tag_data }
timeline_tag_data = { tag_core }
timeline_tag_sep = @{ "timeline_tag" ~ sep }
timeline_tag = { timeline_tag_sep ~ timeline_tag_data }
spatial_tag_data = { tag_core }
spatial_tag_sep = @{ "spatial_tag" ~ sep }
spatial_tag = { spatial_tag_sep ~ spatial_tag_data }
tag = ${ value_tag | timeline_tag | spatial_tag }

//   extras
slot_info = { "slot_info" ~ "(" ~ (tag ~ ("," ~ tag)*)? ~ ")" }
fence_info = { "fence_info" ~ "(" ~ timeline_tag? ~ ")" }
buffer_info = { "buffer_info" ~ "(" ~ spatial_tag? ~ ")" }
dict_key = { id | var_name }
value = { var_name | n | funclet_loc | fn_name | typ | place | none |
    stage | tag | slot_info | fence_info | buffer_info | str }
list_values = { dict_value ~ ("," ~ dict_value)* ~ ","? }
list = { "[" ~ list_values? ~ "]" }
dict_value = { value | list | unchecked_dict }
dict_element = { dict_key ~ ":" ~ dict_value }
unchecked_dict = { "{" ~ (dict_element ~ ("," ~ dict_element)*)? ~ ","? ~ "}" }

// Program
program = { SOI ~ version ~ types ~ funclets ~ extras ~ pipelines ~ EOI }

version_keyword = @{ "version" ~ sep }
version = ${ version_keyword ~ n ~ "." ~ n ~ "." ~ n }

// Types
types = { "types" ~ "[" ~ type_def? ~ ("," ~ type_def)* ~ ","? ~ "]" }
ir_type_decl_key = { "native_value" | "slot" | "fence" | "buffer" | "event" | "space_buffer" }
ir_type_decl_key_sep = ${ ir_type_decl_key ~ sep }
ir_type_decl = { ir_type_decl_key_sep ~ type_name ~ unchecked_dict }
ffi_type_decl = { ffi_type }
type_def = { ffi_type_decl | ir_type_decl }

// Funclets
funclets = { funclet_def* }

funclet_def = { external_funclet | funclet | value_function }

//   external
external_cpu_sep = @{ "external_cpu" ~ sep }
external_cpu_args = { ffi_type ~ ("," ~ ffi_type)* }
external_cpu_return_args = { "[" ~ external_cpu_args ~ "]" | ffi_type }
external_cpu = { external_cpu_sep ~ fn_name ~ "(" ~ external_cpu_args? ~ ")" ~ "->" ~ external_cpu_return_args ~ ";" }

external_gpu_sep = @{ "external_gpu" ~ sep }
external_gpu_resource = { "resource" ~ unchecked_dict }
external_gpu_body = { external_gpu_resource ~ ("," ~ external_gpu_resource)* }
external_gpu_arg = { (var_name ~ ":")? ~ ffi_type }
external_gpu_args = { external_gpu_arg ~ ("," ~ external_gpu_arg)* }
external_gpu = { external_gpu_sep ~ fn_name ~ "(" ~ external_gpu_args? ~ ")" ~ "->" ~
     "[" ~ external_gpu_args ~ "]" ~ ":" ~ str ~ "{" ~ external_gpu_body ~ "}" }

external_funclet = { external_cpu | external_gpu }

//   value functions
value_function_sep = @{ "value_function" ~ sep }
value_function_args = { typ ~ ("," ~ typ)* }
value_function_funclets = { fn_name ~ ("," ~ fn_name)* }
value_function = { value_function_sep ~ fn_name ~ "("
    ~ value_function_args? ~ ")" ~ "->" ~ typ ~ ":" ~ "[" ~ value_function_funclets ~ "]" ~ ";" }

//   funclet
value_sep = @{ "value" ~ sep }
schedule_sep = @{ "schedule" ~ sep }
timeline_sep = @{ "timeline" ~ sep }
spatial_sep = @{ "spatial" ~ sep }
funclet = { value_sep ~ value_funclet | schedule_sep ~ schedule_funclet |
    timeline_sep ~ timeline_funclet | spatial_sep ~ spatial_funclet }
funclet_arg = { (var_name ~ ":")? ~ typ }
funclet_args = { funclet_arg ~ ("," ~ funclet_arg)* }
funclet_return = { "[" ~ funclet_args ~ "]" | typ }
funclet_header = { fn_name ~ "(" ~ funclet_args? ~ ")" ~ "->" ~ funclet_return }

//   tail edges

node_list = { var_name ~ ("," ~ var_name)* }
node_box_raw = { "[" ~ node_list? ~ "]" }
node_box = { node_box_raw | hole }

return_sep = ${ "return" ~ sep }
return_args = { var_name | "[" ~ var_name ~ (", " ~ var_name)* ~ "]" }
return_command = { return_sep ~ return_args }
yield_sep = ${ "yield" ~ sep }
yield_command = { yield_sep ~ (n | hole) ~ node_box ~ fn_name ~ var_name ~ node_box }
jump_sep = ${ "jump" ~ sep }
jump_command = { jump_sep ~ var_name ~ node_box }

schedule_call_sep = ${ "schedule-call" ~ sep }
schedule_call_command = { schedule_call_sep ~ funclet_loc ~ fn_name ~ node_box ~ var_name }
schedule_select_sep = ${ "schedule-select" ~ sep }
tail_fn_nodes = { fn_name ~ ("," ~ fn_name)* }
tail_fn_box_raw = { "[" ~ tail_fn_nodes? ~ "]" }
tail_fn_box = { tail_fn_box_raw | hole }
schedule_select_command = { schedule_select_sep ~ funclet_loc ~ var_name ~ tail_fn_box ~ node_box ~ var_name }

dynamic_alloc_sep = ${ "dynamic-alloc" ~ sep }
tail_option_node = { var_name | none }
tail_option_nodes = { tail_option_node ~ ("," ~ tail_option_node)* }
tail_option_box_raw = { "[" ~ tail_option_nodes? ~ "]" }
tail_option_box = { tail_option_box_raw | hole }
dynamic_alloc_command = { dynamic_alloc_sep ~ var_name ~ node_box ~ tail_option_box ~ fn_name ~ fn_name ~ var_name }

tail_edge = { return_command | yield_command | jump_command |
    schedule_call_command | schedule_select_command | dynamic_alloc_command }

//   command setup

value_assign = { var_name ~ "=" ~ value_command }
value_funclet = { funclet_header ~ "{" ~ (value_assign ~ ";")* ~ tail_edge ~ ";" ~ "}" }

schedule_assign = { var_name ~ "=" ~ schedule_command }
schedule_funclet = { funclet_header ~ "{" ~ ((schedule_assign | tail_edge | node_hole) ~ ";")* ~ "}" }

timeline_assign = { var_name ~ "=" ~ timeline_command }
timeline_funclet = { funclet_header ~ "{" ~ ((timeline_assign | tail_edge | node_hole) ~ ";")* ~ "}" }

spatial_assign = { var_name ~ "=" ~ spatial_command }
spatial_funclet = { funclet_header ~ "{" ~ ((spatial_assign | tail_edge | node_hole) ~ ";")* ~ "}" }

//    commands

phi_command = ${ "phi" ~ sep ~ n }

//     value

constant_command = ${ "constant" ~ sep ~ constant }
extract_sep = @{ "extract" ~ sep }
extract_command = { extract_sep ~ var_name ~ n }
call_sep = @{ "call" ~ sep }
call_args = { var_name ~ ("," ~ var_name)* }
call_command = { call_sep ~ fn_name ~ ("<" ~ call_args? ~ ">" | hole )? ~ ("(" ~ call_args? ~ ")" | hole ) }
select_sep = @{ "select" ~ sep }
select_command = { select_sep ~ var_name ~ var_name ~ var_name }

value_command = { phi_command | constant_command |
    extract_command | call_command | select_command }

//     scheduling

alloc_temporary_command = ${ "alloc-temporary-" ~ place ~ "-" ~ typ ~ sep ~ funclet_loc }
do_sep = ${ "encode-do-" ~ place ~ sep }
do_args = { var_name ~ ("," ~ var_name)* }
do_params = { "(" ~ do_args? ~ ")" }
do_command = { do_sep ~ funclet_loc ~ ( do_params | hole ) ~ "->" ~ var_name }
create_command = ${ "create-" ~ place ~ "-" ~ typ ~ sep ~ funclet_loc }
drop_command = ${ "drop" ~ sep ~ var_name }
alloc_sep = ${"alloc-" ~ place ~ "-" ~ typ ~ sep}
alloc_command = { alloc_sep ~ var_name ~ funclet_loc }
encode_copy_sep = ${ "encode-copy-" ~ place ~ sep }
encode_copy_command = { encode_copy_sep ~ var_name ~ var_name }
submit_command = ${ "submit-" ~ place ~ sep ~ funclet_loc }
encode_fence_command = ${ "encode-fence-" ~ place ~ sep ~ funclet_loc }
sync_fence_sep = ${ "sync-fence-" ~ place ~ sep }
sync_fence_command = { sync_fence_sep ~ var_name ~ funclet_loc }
inline_join_sep = @{ "inline-join" ~ sep }
inline_join_command = { inline_join_sep ~ fn_name ~ node_box ~ var_name }
serialized_join_sep = @{ "serialized-join" ~ sep }
serialized_join_command = { serialized_join_sep ~ fn_name ~ node_box ~ var_name }
default_join_command = { "default-join" }

schedule_command = { phi_command | alloc_temporary_command | do_command | create_command |
    drop_command | alloc_command | encode_copy_command | submit_command | encode_fence_command  |
    sync_fence_command | inline_join_command | serialized_join_command | default_join_command }

//     timeline

sync_sep = ${ "sync-" ~ place ~ "->" ~ place ~ sep }
sync_command = { sync_sep ~ var_name ~ var_name }
submission_command = ${ "submission-" ~ place ~ "->" ~ place ~ sep ~ var_name }

timeline_command = { phi_command | sync_command | submission_command }

//     spatial

spatial_command = { "INVALID" } // empty for now...

// Extras
extras = { "extras" ~ "{" ~ (extra ~ ",")* ~ "}" }
extra = { fn_name_sep ~ unchecked_dict }

// Pipelines
pipelines = { (pipeline ~ ";")+ }
pipeline_sep = @{ "pipeline" ~ sep }
pipeline = { pipeline_sep ~ str ~ "=" ~ fn_name }