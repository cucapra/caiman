version 0.0.2

type i32;
ref %i32l : i32-local;
ref %i32g : i32-gpu;
event %event0;
buffer %buffer_gpu : gpu<alignment_bits = 0, byte_size = 1024>;
buffer_space %buff_space;

function @simple(i32) -> i32;
function @foo(i32) -> i32;

external-gpu[impl @simple] %simple(%x : i32) -> [%out : i32]
{
    path : "gpu_external.comp",
    entry : "main",
    dimensionality : 3,
    resource {
        group : 0,
        binding : 0,
        input : %x
    },
    resource {
        group : 0,
        binding : 1,
        output : %out
    }
}

value[impl @foo] %foo(%x : i32) -> i32 {
    %y_t = call @simple(%x);
    %y = extract %y_t 0;
    return %y;
}

timeline %foo_time(%e : %event0) -> %event0 {
    %sub = submission-event %e;
    %snc = synchronization-event %sub %sub;
    return %snc;
}

spatial %foo_space(%bs : %buff_space) -> %buff_space {
    return %bs;
}

schedule[value $val = %foo, timeline $time = %foo_time, spatial $space = %foo_space]
%foo_main<input($time.%e)-have, output($time.%e)-have>
(%x_loc : node($val.%x)-have %i32l,
%in_buff : input($space.%bs)-have %buffer_gpu,
%out_buff : output($space.%bs)-have %buffer_gpu)
-> [%out : output($val.%x)-have output($space.%bs)-have %i32g] {
    %x_gpu = alloc-temporary gpu i32;
    %y_gpu = alloc-temporary gpu i32;
    %y_loc = alloc-temporary local i32;
    %enc = begin-encoding gpu node(%sub)[%x_gpu, %y_gpu] [];
    encode-copy %enc %x_loc -> %x_gpu;
    encode-do %enc %simple node(%y_t)(%x_gpu) -> %y_gpu;
    %fnc = submit %enc node(%sub);
    sync-fence %fnc node(%snc);
    local-copy %y_gpu -> %y_loc;
    %result = read-ref i32 %y_loc;
    return %result;
}

pipeline "main" = %foo_main;