extern compute : (i64, i64) -> i64;

function class compute { compute }

value foo() -> i64 {
    let x = 4. 
    let y = (compute x z).
    let z = 10. 
    returns y.
}

function class foo_class { foo }

schedule foo {
    fn bar() -> &y 
      at time my_time and space my_space
    {
        let x_slot := x.Prim;
        let z_slot := z.Prim;
        let y_slot := y.CallExternal.compute(x_slot, z_slot);
        return y_slot;
    }

}

timeline my_time(e : Event) -> Event {
    return e;
}

spatial my_space(bs : BufferSpace) -> BufferSpace {
    return bs;
}


pipeline main = bar;
