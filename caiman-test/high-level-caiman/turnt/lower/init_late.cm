

sptl space(bs: BufferSpace) -> BufferSpace { returns bs }
tmln time(e: Event) -> Event { returns e }

val calc() -> i64 { returns 1 }

fn calc_impl() -> i64 impls calc, space, time {
    1
}

extern(cpu) pure bar() -> i64

val foo() -> i64 {
    x :- bar()
    a :- 0 if true else 1
    returns x + a
}

fn foo_impl() -> i64 impls foo, time, space {
    var x;
    ???;
    let a = if true {
        /* #CHECK-LABEL:
        name: FuncletId(
            "_foo_impl3",
        ),
        args: [...
        FuncletArgument {
        name: Some(
            NodeId(
                "_x%0_ref",
            ),
        ),
        typ: TypeId(
            "&i64",
        ),
        tags: [
            Tag {
                quot: Filled(
                    RemoteNodeId {
                        funclet: MetaId(
                            "val",
                        ),
                        node: None,
                    },
                ),
                flow: Filled(
                    Dead,
                ),
        #END */
        /* #CHECK:
        ret: [...
        FuncletArgument {
        name: None,
        typ: TypeId(
            "&i64",
        ),
        tags: [
            Tag {
                quot: Filled(
                    RemoteNodeId {
                        funclet: MetaId(
                            "val",
                        ),
                        node: Some(
                            Filled(
                                NodeId(
                                    "x",
                                ),
                            ),
                        ),
                    },
                ),
                flow: Filled(
                    Usable,
                ),
        #END */
        ???
    } else {
        /* #CHECK-LABEL:
        name: FuncletId(
            "_foo_impl4",
        ),
        args: [...
        FuncletArgument {
        name: Some(
            NodeId(
                "_x%0_ref",
            ),
        ),
        typ: TypeId(
            "&i64",
        ),
        tags: [
            Tag {
                quot: Filled(
                    RemoteNodeId {
                        funclet: MetaId(
                            "val",
                        ),
                        node: None,
                    },
                ),
                flow: Filled(
                    Dead,
                ),
        #END */
        /* #CHECK:
        ret: [...
        FuncletArgument {
        name: None,
        typ: TypeId(
            "&i64",
        ),
        tags: [
            Tag {
                quot: Filled(
                    RemoteNodeId {
                        funclet: MetaId(
                            "val",
                        ),
                        node: Some(
                            Filled(
                                NodeId(
                                    "x",
                                ),
                            ),
                        ),
                    },
                ),
                flow: Filled(
                    Usable,
                ),
        #END */
        ???
    };
    x + a
}

fn baz_impl() -> i64 impls foo, time, space {
    var x2;
    ???;
    let a2 = if true {
        0
    } else {
        1
    };
    /* #CHECK:
    name: FuncletId(
        "_baz_impl2",
    ),
    args: [...
        FuncletArgument {
            name: Some(
                NodeId(
                    "_x2%0_ref",
                ),
            ),
            typ: TypeId(
                "&i64",
            ),
            tags: [
                Tag {
                    quot: Filled(
                        RemoteNodeId {
                            funclet: MetaId(
                                "val",
                            ),
                            node: None,
                        },
                    ),
                    flow: Filled(
                        Dead,
                    ),
                },
    #END */
    ???;
    x2 + a2
}