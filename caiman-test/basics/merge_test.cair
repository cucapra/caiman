version 0.0.2

type i64;
event %event0;
buffer_space %buffspace;
native_value %ni64 : i64;

function @add(i64, i64) -> i64;
function @main() -> i64;

external-cpu-pure[impl @add] %add(i64, i64) -> i64;

value[impl default @main] %foo() -> i64 {
    %res_t = call @add(%n1, %n2); // 8 + 5 = 13
    %res = extract %res_t 0;
    %n2_t = call @add(%x, %n1); // 3 + 5 = 8
    %n2 = extract %n2_t 0;
    %n1_t = call @add(%x, %y); // 3 + 2 = 5
    %n1 = extract %n1_t 0;
    %x = constant %ni64 3;
    %y = constant %ni64 2;
    return %res;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_main<input($time.%e)-usable, output($time.%e)-usable>() ->
[%out : %ni64] {
    %x_loc = alloc-temporary local [] i64;
    %y_loc = alloc-temporary local [] i64;
    %n1_loc = alloc-temporary local [] i64;
    %n2_loc = alloc-temporary local [] i64;
    %res_loc = alloc-temporary local [] i64;

    local-do-builtin node($val.%x)() -> %x_loc;
    local-do-builtin node($val.%y)() -> %y_loc;

    %x = read-ref i64 %x_loc;
    %y = read-ref i64 %y_loc;
    local-do-external %add node($val.%n1_t)(%x, %y) -> %n1_loc;
    %n1 = read-ref i64 %n1_loc;
    local-do-external %add node($val.%n2_t)(%x, %n1) -> %n2_loc;
    %n2 = read-ref i64 %n2_loc;
    local-do-external %add node($val.%res_t)(%n1, %n2) -> %res_loc;
    
    %res_val = read-ref i64 %res_loc;
    return %res_val;
}

pipeline "main" = %foo_main;