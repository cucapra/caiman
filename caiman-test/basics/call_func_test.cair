version 0.0.2

type i64;
type tuple<i64>;
event %event0;
buffer_space %buffspace;
native_value %ni64 : i64;
native_value %nti64 : tuple<i64>;

function @main() -> i64;
function @foo() -> i64;


// main

value[impl default @main] %main() -> i64 {
    %y_t = call @foo();
    %y = extract %y_t 0;
    return %y;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%main_head<none($time.%e)-met, none($time.%e)-met>() ->
    [%out : none($val.%y)-have none($space.%e)-met none($time.%e)-met %ni64] 
{

    %default = default-join;
    %join = inline-join %main_ret [] %default;

    schedule-call %foo_impl[value node($val.%y_t),
        timeline none($time.%e),
        spatial none($space.%none)]() %join;
}

schedule[value $val = %main, timeline $time = %time, spatial $space = %space]
%main_ret<none($time.%e)-met, none($time.%e)-met>
    (%y : none($val.%y)-have none($space.%e)-met none($time.%e)-met %ni64) ->
    [%out : none($val.%y)-have none($space.%e)-met none($time.%e)-met %ni64] 
{
    // %result = read-ref i64 %y;

    return %y;

    // %y_ref = alloc-temporary local [] i64;
    // local-do-builtin node($val.%y)() -> %y_ref;
    // local-copy %y -> %y_ref;
    // %result = read-ref i64 %y_ref;
    // return %result;
}

// foo


value[impl default @foo] %foo() -> i64 {
    %i = constant %ni64 20;
    return %i;
}

schedule[value $val = %foo, timeline $time = %time, spatial $space = %space]
%foo_impl<none($time.%e)-met, none($time.%e)-met>() ->
    [%out : none($val.%i)-have none($space.%none)-met none($time.%none)-met %ni64] 
{
    %i_ref = alloc-temporary local [] i64;
    local-do-builtin node($val.%i)() -> %i_ref;
    %result = read-ref i64 %i_ref;
    return %result;
}



pipeline "main" = %main_head;