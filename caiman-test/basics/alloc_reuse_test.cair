// equivalent to the C++ code (to test reuse of temp memory)
// long addtwo(long x) {
//     long* loc = new long;
//     *loc = x;
//     *loc = *loc + 1;
//     *loc = *loc + 1;
//     return *loc;
// }

version 0.0.2

pipeline "main" = %addtwo_head;

type i64;
event %event0;
buffer_space %buffspace;
native_value %i64n : i64;

function @add(i64, i64) -> i64;

external-cpu-pure[impl @add] %add(i64, i64) -> i64;

function @addtwo(i64) -> i64;

value[impl default @addtwo] %addtwo(%x : i64) -> i64 {
    %one = constant %i64n 1;
    
    %y_t = call @add(%x, %one);
    %y = extract %y_t 0;

    %result_t = call @add(%y, %one);
    %result = extract %result_t 0;

    return %result;
}

timeline %time(%e : %event0) -> %event0 {
    return %e;
}

spatial %space(%bs : %buffspace) -> %buffspace {
    return %bs;
}

// implement addtwo

schedule[value $val = %addtwo, timeline $time = %time, spatial $space = %space] 
%addtwo_head
<$time.%e-usable, $time.%e-usable>
    (%x     : $val.%x-usable $time.%e-usable $space.%bs-usable %i64n)
    -> 
    $val.%result-usable $time.%e-usable $space-usable %i64n
{
    %one_ref = alloc-temporary local [storage, map_write] i64;
    %result_ref = alloc-temporary local [storage, map_write] i64;

    local-do-builtin $val.%one() -> %one_ref;
    %one = read-ref i64 %one_ref;

    local-do-external %add $val.%y_t(%x, %one) -> %result_ref;
    %y = read-ref i64 %result_ref;
    local-do-external %add $val.%result_t(%y, %one) -> %result_ref;
    %result = read-ref i64 %result_ref;

    return %result;
}