#version 0.1.0

extern(gpu) simple(x : i32) -> out: i32
{
    path : "gpu_external.comp",
    entry : "main",
    dimensions : 3,
    resource {
        group : 0,
        binding : 0,
        input : x
    },
    resource {
        group : 0,
        binding : 1,
        output : out
    }
}

val foo(x : i32) -> i32 {
    c :- 1
    y :- simple'<c, c, c>(x)

    y2 :- bar(y)
    returns y2
}

val bar(x : i32) -> i32 {
    c :- 1
    returns simple'<c, c, c>(x)
}

tmln foo_time(e : Event) -> out: Event {
    loc1, rem1 :- encode_event(e)
    sub :- submit_event(rem1)
    snc :- sync_event(loc1, sub)

    loc2, rem2 :- encode_event(snc)
    sub2 :- submit_event(rem2)
    snc2 :- sync_event(loc2, sub2)
    returns snc2
}

sptl foo_space(bs : BufferSpace) -> BufferSpace {
    returns bs
}

fn foo_impl(x: &i32) -> i32 impls foo_time, foo_space, foo {
    @in { input: input(tmln.e) };
    let e = encode-begin gpu;
    encode e.copy[x_gpu <- x];
    encode e.call[y_gpu <- simple'<1, 1, 1>(x_gpu)];
    let s = submit e;
    let f = await s;
    let r = bar_impl(f.y_gpu);
    @in { input: node(tmln.snc2) };
    r
}

fn bar_impl(x: i32 @ node(tmln.snc)) -> i32 impls foo_time, foo_space, bar {
    @in { input: node(tmln.snc) };
    let e = encode-begin gpu;
    var x = x;
    encode e.copy[x_gpu <- &x];
    encode e.call[y_gpu <- simple'<1, 1, 1>(x_gpu)];
    let s = submit e;
    let f = await s;
    @out { output: node(tmln.snc2) };
    f.y_gpu
}

pipeline main { foo_impl } 