#version 0.1.0

tmln time(e: Event) -> Event { returns e }
sptl space(bs: BufferSpace) -> BufferSpace { returns bs }


val main() -> i64 {
    b :- false
    one :- 1
    two :- 2
    r :- one if b else two
    returns r
}

fn foo() -> i64 @ node(main.r)-usable 
    impls main, time, space
{
    let b @ main-? = false @ node(main.b);
    var v @ none(main);
    if @ node(main.r) b {
        let one @ main-? = 1 @ node(main.one);
        v = one;
    } else {
        let two @ main-? = 2 @ node(main.two);
        v = two;
    }
    @in { v: [node(main.r)-usable, none(space)-save] };
    v
}

pipeline main { foo }