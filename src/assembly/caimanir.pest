// Definitions
//   pest
WHITESPACE = _{ "\t" | " " | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }
sep = _{ WHITESPACE+ }

//   baseline
id = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
n = @{ ASCII_DIGIT+ }
str_single = @{ "'" ~ (!"'" ~ !NEWLINE ~ ANY)* ~ "'" }
str_double = @{ "\"" ~ (!"\"" ~ !NEWLINE ~ ANY)* ~ "\"" }
str = @{ str_single | str_double }
type_name = ${ "$" ~ id }
type_name_sep = ${ type_name ~ sep }
var_name = ${ "%" ~ (id | n) }
var_name_sep = ${ var_name ~ sep }
fn_name = ${ "@" ~ id }
fn_name_sep = ${ fn_name ~ sep }
funclet_loc = ${ fn_name ~ "." ~ var_name }
funclet_loc_sep = ${ funclet_loc ~ sep }

//   names
ffi_type = { "i32" }
ffi_type_sep = ${ ffi_type ~ sep }
typ = { ffi_type | type_name }
typ_sep = ${ typ ~ sep }
place = { "local" | "cpu" | "gpu" }
stage = { "unbound" | "bound" | "encoded" | "submitted" | "ready" | "dead" }
constant = ${ n ~ ffi_type } // maybe needs reworking eventually :thinking:

//   tags
tag_core_op = { "operation" | "input" | "output" }
tag_none = { "none" }
tag_core = ${ tag_none | tag_core_op ~ sep ~ funclet_loc }
tag_halt = ${ "halt" ~ sep ~ var_name }
value_tag_op = { "function_input" | "function_output" }
value_tag_loc = ${ value_tag_op ~ sep ~ funclet_loc }
value_tag = { tag_core | value_tag_loc | tag_halt }
timeline_tag = { tag_core }
spatial_tag = { tag_core }
tag = ${ "value_tag" ~ sep ~ value_tag | "timeline_tag" ~ sep ~ timeline_tag | "spatial_tag" ~ sep ~ spatial_tag }

//   extras
dict_key = { id | var_name }
value = { funclet_loc | var_name | fn_name | typ | place | stage | tag }
list_values = { value ~ ("," ~ value)* ~ ","? }
list = { "[" ~ list_values? ~ "]" }
dict_value = { value | list | unchecked_dict }
dict_element = { dict_key ~ ":" ~ dict_value }
unchecked_dict = { "{" ~ (dict_element ~ ("," ~ dict_element)*)? ~ ","? ~ "}" }

// Program
program = { SOI ~ version ~ types ~ funclets ~ extras ~ pipelines ~ EOI }

version_keyword = @{ "version" ~ sep }
version = ${ version_keyword ~ n ~ "." ~ n ~ "." ~ n }

// Types
types = { "types" ~ "[" ~ type_def? ~ ("," ~ type_def)* ~ ","? ~ "]" }
type_decl = { "slot" | "event" }
type_decl_sep = ${ type_decl ~ sep }
ir_type_decl = { type_decl_sep ~ type_name ~ unchecked_dict }
type_def = { ffi_type | ir_type_decl }

// Funclets
funclets = { funclet_def* }

funclet_def = { external_funclet | funclet }

//   external
external_name = @{ ("external_cpu" | "external_gpu") ~ sep }
external_args = { ffi_type ~ ("," ~ ffi_type)* }
external_funclet = { external_name ~ ffi_type_sep ~ fn_name ~ "(" ~ external_args? ~ ")" ~ ";" }

//   funclet
value_sep = @{ "value" ~ sep }
schedule_sep = @{ "schedule" ~ sep }
timeline_sep = @{ "timeline" ~ sep }
funclet = { value_sep ~ value_funclet | schedule_sep ~ schedule_funclet | timeline_sep ~ timeline_funclet }
funclet_arg = { typ_sep ~ var_name }
funclet_args = {  funclet_arg ~ ("," ~ funclet_arg)* }
funclet_header = { typ_sep ~ fn_name ~ "(" ~ funclet_args? ~ ")" }
value_funclet = { funclet_header ~ "{" ~ (value_command ~ ";")* ~ "}" }
schedule_funclet = { funclet_header ~ "{" ~ (schedule_command ~ ";")* ~ "}" }
timeline_funclet = { funclet_header ~ "{" ~ (timeline_command ~ ";")* ~ "}" }

//    commands
phi_right = ${ "phi" ~ sep ~ n }
phi_command = { var_name ~ "=" ~ phi_right }
return_command = ${ "return" ~ sep ~ var_name }

constant_sep = @{ "constant" ~ sep }
constant_command = { var_name ~ "=" ~ constant_sep ~ constant }
value_command = { phi_command | return_command | constant_command }

alloc_right = ${ "alloc-" ~ place ~ "-" ~ typ ~ sep ~ funclet_loc}
alloc_command = { var_name ~ "=" ~ alloc_right }
do_sep = ${ "do-" ~ place ~ sep }
do_args = { var_name ~ ("," ~ var_name)* }
do_command = { do_sep ~ funclet_loc ~ "(" ~ do_args? ~ ")" ~ "->" ~ var_name }
schedule_command = { phi_command | return_command | alloc_command | do_command }
timeline_command = { phi_command | return_command }

// Extras
extras = { "extras" ~ "{" ~ (extra ~ ",")* ~ "}" }
extra = { fn_name_sep ~ unchecked_dict }

// Pipelines
pipelines = { (pipeline ~ ";")+ }
pipeline_sep = @{ "pipeline" ~ sep }
pipeline = { pipeline_sep ~ str ~ "=" ~ fn_name }