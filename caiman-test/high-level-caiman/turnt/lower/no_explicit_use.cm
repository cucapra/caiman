

sptl space(bs: BufferSpace) -> BufferSpace { returns bs }
tmln time(e: Event) -> Event { returns e }


extern(cpu) pure bar() -> i64

val foo() -> i64 {
    x :- bar()
    z :- x if false else x
    a :- z if true else 1
    returns a
}

fn baz_impl() -> i64 impls foo, time, space {
    let a2 = if true {
        var x2: i64 @ node(val.x);
        ???;
        if false {
            /* #CHECK:
            name: FuncletId(
                "_baz_impl5",
            ),
            args: [...
                FuncletArgument {
                    name: Some(
                        NodeId(
                            "_x2%0_ref",
                        ),
                    ),
                    typ: TypeId(
                        "&i64",
                    ),
                    tags: [
                        Tag {
                            quot: Filled(
                                RemoteNodeId {
                                    funclet: MetaId(
                                        "val",
                                    ),
                                    node: Some(
                                        Filled(
                                            NodeId(
                                                "x",
                                            ),
                                        ),
                                    ),
                                },
                            ),
                            flow: Filled(
                                Usable,
                            ),
            #END */
            ?
        } else {
            ?
        }
    } else {
        1
    };
    var k: i64;
    a2
}